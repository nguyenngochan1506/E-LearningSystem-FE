This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.editorconfig
.github/instructions/nx.instructions.md
.github/workflows/ci.yml
.gitignore
.npmrc
.prettierignore
.prettierrc
.verdaccio/config.yml
apps/student-app/eslint.config.mjs
apps/student-app/index.html
apps/student-app/package.json
apps/student-app/postcss.config.js
apps/student-app/src/app/app.tsx
apps/student-app/src/app/components/common/GlobalContex.tsx
apps/student-app/src/app/components/common/translate/header.translate.tsx
apps/student-app/src/app/components/common/translate/home.translate.tsx
apps/student-app/src/app/components/common/translate/translate.tsx
apps/student-app/src/app/components/layout/Footer.tsx
apps/student-app/src/app/components/layout/Header.tsx
apps/student-app/src/app/components/ui/Course.tsx
apps/student-app/src/app/components/ui/Slider.tsx
apps/student-app/src/app/pages/home/Home.tsx
apps/student-app/src/app/pages/home/SectionCourse.tsx
apps/student-app/src/app/pages/login/Login.tsx
apps/student-app/src/app/types/CourseType.tsx
apps/student-app/src/app/types/LanguageType.tsx
apps/student-app/src/main.tsx
apps/student-app/src/styles.css
apps/student-app/tailwind.config.js
apps/student-app/tsconfig.app.json
apps/student-app/tsconfig.json
apps/student-app/vite.config.ts
apps/teacher-app/eslint.config.mjs
apps/teacher-app/index.html
apps/teacher-app/package.json
apps/teacher-app/postcss.config.js
apps/teacher-app/src/app/app.tsx
apps/teacher-app/src/app/components/common/GlobalContext.tsx
apps/teacher-app/src/app/components/common/translate/dashboard.translate.tsx
apps/teacher-app/src/app/components/common/translate/header.translate.tsx
apps/teacher-app/src/app/components/common/translate/login.translate.tsx
apps/teacher-app/src/app/components/common/translate/translate.tsx
apps/teacher-app/src/app/components/common/translate/user-management.translate.tsx
apps/teacher-app/src/app/components/layout/DashBoardLayout.tsx
apps/teacher-app/src/app/components/layout/Footer.tsx
apps/teacher-app/src/app/components/layout/Header.tsx
apps/teacher-app/src/app/components/layout/Modal.tsx
apps/teacher-app/src/app/components/layout/SideBar.tsx
apps/teacher-app/src/app/components/ui/button.tsx
apps/teacher-app/src/app/components/ui/Input.tsx
apps/teacher-app/src/app/pages/course/api.ts
apps/teacher-app/src/app/pages/course/CourseForm.tsx
apps/teacher-app/src/app/pages/course/create_course.tsx
apps/teacher-app/src/app/pages/course/LessonForm.tsx
apps/teacher-app/src/app/pages/course/LessonList.tsx
apps/teacher-app/src/app/pages/course/types.ts
apps/teacher-app/src/app/pages/dashboard/DashBoard.tsx
apps/teacher-app/src/app/pages/login/ForgotPassword.tsx
apps/teacher-app/src/app/pages/login/Login.tsx
apps/teacher-app/src/app/pages/user-management/AddUserModal.tsx
apps/teacher-app/src/app/pages/user-management/UserManagement.tsx
apps/teacher-app/src/app/pages/user-management/UserManagementContext.tsx
apps/teacher-app/src/app/types/LanguageType.tsx
apps/teacher-app/src/main.tsx
apps/teacher-app/src/styles.css
apps/teacher-app/tailwind.config.js
apps/teacher-app/tsconfig.app.json
apps/teacher-app/tsconfig.json
apps/teacher-app/vite.config.ts
eslint.config.mjs
nx.json
package.json
pnpm-workspace.yaml
README.md
repomix-output.txt
tsconfig.base.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
# Editor configuration, see http://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
max_line_length = off
trim_trailing_whitespace = false
</file>

<file path=".github/instructions/nx.instructions.md">
---
applyTo: '**'
---

// This file is automatically generated by Nx Console

You are in an nx workspace using Nx 21.0.3 and pnpm as the package manager.

You have access to the Nx MCP server and the tools it provides. Use them. Follow these guidelines in order to best help the user:

# General Guidelines
- When answering questions, use the nx_workspace tool first to gain an understanding of the workspace architecture
- For questions around nx configuration, best practices or if you're unsure, use the nx_docs tool to get relevant, up-to-date docs!! Always use this instead of assuming things about nx configuration
- If the user needs help with an Nx configuration or project graph error, use the 'nx_workspace' tool to get any errors
- To help answer questions about the workspace structure or simply help with demonstrating how tasks depend on each other, use the 'nx_visualize_graph' tool

# Generation Guidelines
If the user wants to generate something, use the following flow:

- learn about the nx workspace and any specifics the user needs by using the 'nx_workspace' tool and the 'nx_project_details' tool if applicable
- get the available generators using the 'nx_generators' tool
- decide which generator to use. If no generators seem relevant, check the 'nx_available_plugins' tool to see if the user could install a plugin to help them
- get generator details using the 'nx_generator_schema' tool
- you may use the 'nx_docs' tool to learn more about a specific generator or technology if you're unsure
- decide which options to provide in order to best complete the user's request. Don't make any assumptions and keep the options minimalistic
- open the generator UI using the 'nx_open_generate_ui' tool
- wait for the user to finish the generator
- read the generator log file using the 'nx_read_generator_log' tool
- use the information provided in the log file to answer the user's question or continue with what they were doing
undefined

# CI Error Guidelines
If the user wants help with fixing an error in their CI pipeline, use the following flow:
- Retrieve the list of current CI Pipeline Executions (CIPEs) using the 'nx_cloud_cipe_details' tool
- If there are any errors, use the 'nx_cloud_fix_cipe_failure' tool to retrieve the logs for a specific task
- Use the task logs to see what's wrong and help the user fix their problem. Use the appropriate tools if necessary
- Make sure that the problem is fixed by running the task that you passed into the 'nx_cloud_fix_cipe_failure' tool
</file>

<file path=".github/workflows/ci.yml">
name: CI

on:
  push:
    branches:
      - master
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9.8.0
          run_install: false

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: pnpm dlx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # - run: pnpm exec nx-cloud record -- echo Hello World
      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      - run: pnpm exec nx affected -t lint test build
</file>

<file path=".npmrc">
strict-peer-dependencies=false
auto-install-peers=true
</file>

<file path=".prettierignore">
# Add files here to ignore them from prettier formatting
/dist
/coverage
/.nx/cache
/.nx/workspace-data
</file>

<file path=".prettierrc">
{
  "singleQuote": true
}
</file>

<file path=".verdaccio/config.yml">
# path to a directory with all packages
storage: ../tmp/local-registry/storage

# a list of other known repositories we can talk to
uplinks:
  npmjs:
    url: https://registry.npmjs.org/
    maxage: 60m

packages:
  '**':
    # give all users (including non-authenticated users) full access
    # because it is a local registry
    access: $all
    publish: $all
    unpublish: $all

    # if package is not available locally, proxy requests to npm registry
    proxy: npmjs

# log settings
log:
  type: stdout
  format: pretty
  level: warn

publish:
  allow_offline: true # set offline to true to allow publish offline
</file>

<file path="apps/student-app/eslint.config.mjs">
import nx from '@nx/eslint-plugin';
import baseConfig from '../../eslint.config.mjs';

export default [
  ...baseConfig,
  ...nx.configs['flat/react'],
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],
    // Override or add rules here
    rules: {},
  },
];
</file>

<file path="apps/student-app/package.json">
{
  "name": "@./student-app",
  "version": "0.0.1",
  "private": true,
  "nx": {
    "name": "student-app"
  }
}
</file>

<file path="apps/student-app/postcss.config.js">
const { join } = require('path');

// Note: If you use library-specific PostCSS/Tailwind configuration then you should remove the `postcssConfig` build
// option from your application's configuration (i.e. project.json).
//
// See: https://nx.dev/guides/using-tailwind-css-in-react#step-4:-applying-configuration-to-libraries

module.exports = {
  plugins: {
    tailwindcss: {
      config: join(__dirname, 'tailwind.config.js'),
    },
    autoprefixer: {},
  },
};
</file>

<file path="apps/student-app/src/app/components/common/GlobalContex.tsx">
import { createContext, useContext, useEffect, useState } from 'react';
import { LanguageType } from '../../types/LanguageType';

export interface GlobalType {
  language: LanguageType;
  setLanguage: (language: LanguageType) => void;
}

export const GlobalContext = createContext<GlobalType | undefined>(undefined);
export const GlobalContextProvider = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  const [language, setLanguage] = useState<LanguageType>('vi');

  useEffect(() => {
    const storedLanguage = localStorage.getItem('language') as LanguageType;
    if (storedLanguage) {
      setLanguage(storedLanguage);
    }
  }, []);

  return (
    <GlobalContext.Provider
      value={{
        language,
        setLanguage,
      }}
    >
      {children}
    </GlobalContext.Provider>
  );
};

export const useGlobalContext = () => {
  const context = useContext(GlobalContext);
  if (!context) {
    throw new Error('not exist context');
  }

  const changeLanguage = (language: LanguageType) => {
    localStorage.setItem('language', language);
    context.setLanguage(language);
  };

  return { ...context, changeLanguage };
};
</file>

<file path="apps/student-app/src/app/components/common/translate/header.translate.tsx">
export default {
  HOME_PAGE: {
    vi: 'Trang chủ',
    en: 'Home',
  },
  COURSES: {
    vi: 'Khóa học',
    en: 'Courses',
  },
  LIBRARY: {
    vi: 'Thư viện',
    en: 'Library',
  },
  FORUM: {
    vi: 'Diễn đàn',
    en: 'Forum',
  },
  SEARCH: {
    vi: 'Tìm kiếm khoá học',
    en: 'Search course',
  },
  LOGIN: {
    vi: 'Đăng nhập',
    en: 'Login',
  },
  SIGN_UP: {
    vi: 'Đăng ký',
    en: 'Sign up',
  },
  LOGOUT: {
    vi: 'Đăng xuất',
    en: 'Logout',
  },
  PROFILE: {
    vi: 'Hồ sơ',
    en: 'Profile',
  },
  SETTINGS: {
    vi: 'Cài đặt',
    en: 'Settings',
  },
};
</file>

<file path="apps/student-app/src/app/components/common/translate/home.translate.tsx">
export default {
  NEW_COURSE: {
    vi: 'Khóa học mới nhất',
    en: 'Latest course',
  },
  FREE_COURSE: {
    vi: 'Khóa học miễn phí',
    en: 'Free course',
  },
  PAID_COURSE: {
    vi: 'Khóa học trả phí',
    en: 'Paid course',
  },
};
</file>

<file path="apps/student-app/src/app/components/common/translate/translate.tsx">
import * as header from './header.translate';
import * as home from './home.translate';

const Translations: Record<string, Record<string, string>> = {
  ...header.default,
  ...home.default,
};

export const translate = (key: string) => {
  const language = localStorage.getItem('language') || 'vi';

  return Translations[key]?.[language] || key;
};
</file>

<file path="apps/student-app/src/app/components/layout/Footer.tsx">
const Footer = () => {
  return (
    <footer className="bg-white text-gray-600 p-4 text-center">
      <div className="flex justify-center space-x-8 mb-4">
        <div>
          <h3 className="font-bold">Ứng dụng</h3>
          <p className="text-gray-500">Nền tảng học tập trực tuyến</p>
        </div>
        <div>
          <h3 className="font-bold">Liên kết nhân</h3>
          <p>Về chúng tôi</p>
          <p>Blog</p>
        </div>
        <div>
          <h3 className="font-bold">Hỗ trợ</h3>
          <p>FAQ</p>
          <p>Liên hệ</p>
        </div>
        <div>
          <h3 className="font-bold">MXH</h3>
          <div className="flex space-x-2">
            <a
              href="https://facebook.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M22.675 0H1.325C.593 0 0 .593 0 1.325v21.351C0 23.407.593 24 1.325 24H12.82v-9.294H9.692v-3.622h3.128V8.413c0-3.1 1.893-4.788 4.659-4.788 1.325 0 2.463.099 2.795.143v3.24l-1.918.001c-1.504 0-1.795.715-1.795 1.763v2.313h3.587l-.467 3.622h-3.12V24h6.116c.732 0 1.325-.593 1.325-1.324V1.325C24 .593 23.407 0 22.675 0z" />
              </svg>
            </a>
            <a
              href="https://youtube.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 9.71 0 12 0 12s0 2.29.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 14.29 24 12 24 12s0-2.29-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />
              </svg>
            </a>
          </div>
        </div>
      </div>
      <p className="text-sm">© 2024 Ứng dụng</p>
    </footer>
  );
};

export default Footer;
</file>

<file path="apps/student-app/src/app/components/layout/Header.tsx">
import { Link } from 'react-router-dom';
import { useGlobalContext } from '../common/GlobalContex';
import { LanguageFlag, LanguageList } from '../../types/LanguageType';
import { translate } from '../common/translate/translate';

const Header = () => {
  const { language, changeLanguage } = useGlobalContext();

  return (
    <header className="bg-blue-900 text-white p-2 flex items-center justify-between sticky top-0 z-50 text-lg px-8">
      <div className="flex items-center space-x-4">
        <Link to="/" className="flex items-center">
          <img src="./logo.png" alt="logo" width={'60px'} />
        </Link>
        <nav className="space-x-4 hidden md:flex">
          <Link to="/" className="hover:underline">
            {translate('HOME_PAGE')}
          </Link>
          <Link to="/courses" className="hover:underline">
            {translate('COURSES')}
          </Link>
          <Link to="/library" className="hover:underline">
            {translate('LIBRARY')}
          </Link>
          <Link to="/forum" className="hover:underline">
            {translate('FORUM')}
          </Link>
        </nav>
      </div>
      <div className="flex items-center space-x-2 text-black">
        <div className="relative">
          <label className="input input-bordered flex items-center gap-2">
            <input
              type="text"
              className="grow"
              placeholder={translate('SEARCH')}
            />
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 16 16"
              fill="currentColor"
              className="h-4 w-4 opacity-70"
            >
              <path
                fillRule="evenodd"
                d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z"
                clipRule="evenodd"
              />
            </svg>
          </label>
        </div>
        {/* <Link to="/profile" className="bg-gray-300 p-2 rounded-full">
          <svg
            className="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
        </Link> */}
        <div>
          <Link to="/login" className="btn btn-primary text-lg">
            {translate('LOGIN')}
          </Link>
        </div>
        <div className="dropdown dropdown-end">
          <div tabIndex={0} role="button" className="btn btn-ghost">
            <img src={LanguageFlag[language]} width={'48px'} alt="icon" />
          </div>
          <ul
            tabIndex={0}
            className="dropdown-content menu bg-base-100 rounded-box z-[1] w-24 p-2 shadow"
          >
            {LanguageList.map((item) => (
              <li
                key={item.code}
                onClick={() => {
                  changeLanguage(item.code);
                }}
              >
                <div>
                  <img src={item.flag} width={'24px'} alt="icon" />
                  {item.code}
                </div>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </header>
  );
};

export default Header;
</file>

<file path="apps/student-app/src/app/components/ui/Course.tsx">
import { Link } from 'react-router-dom';
import { CourseType } from '../../types/CourseType';

interface CourseProps {
  course: CourseType;
}

const Course = ({ course }: CourseProps) => {
  return (
    <div key={course.id} className="card bg-base-100 shadow-xl">
      <figure>
        <img
          src={course.image}
          alt={course.title}
          className="h-48 w-full object-cover"
        />
      </figure>
      <div className="card-body">
        <h2 className="card-title">{course.title}</h2>
        {course.type === 'paid' ? (
          <p>{course.price.toLocaleString('vi-VN')} VNĐ</p>
        ) : (
          <p>Miễn phí</p>
        )}
        <div className="card-actions justify-end">
          <Link to={`/course/${course.id}`} className="btn btn-primary">
            Xem chi tiết
          </Link>
        </div>
      </div>
    </div>
  );
};

export default Course;
</file>

<file path="apps/student-app/src/app/components/ui/Slider.tsx">
import { Link } from 'react-router-dom';

const Slider = () => {
  return (
    <div className="carousel w-full">
      <div id="slide1" className="carousel-item relative w-full">
        <img
          src="https://placehold.co/1200x400?text=Hero+Image+1"
          className="w-full"
          alt="slide 1"
        />
        <div className="hero-overlay bg-opacity-60 absolute inset-0"></div>
        <div className="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
          <a href="#slide4" className="btn btn-circle">
            ❮
          </a>
          <a href="#slide2" className="btn btn-circle">
            ❯
          </a>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white">
          <div className="max-w-md">
            <h1 className="mb-5 text-5xl font-bold">Học mọi lúc, mọi nơi</h1>
            <p className="mb-5">
              Tham gia các khóa học trực tuyến chất lượng cao để nâng cao kỹ
              năng của bạn!
            </p>
            <Link to="/courses" className="btn btn-primary">
              Khám phá ngay
            </Link>
          </div>
        </div>
      </div>
      <div id="slide2" className="carousel-item relative w-full">
        <img
          src="https://placehold.co/1200x400?text=Hero+Image+2"
          className="w-full"
          alt="slide 2"
        />
        <div className="hero-overlay bg-opacity-60 absolute inset-0"></div>
        <div className="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
          <a href="#slide1" className="btn btn-circle">
            ❮
          </a>
          <a href="#slide3" className="btn btn-circle">
            ❯
          </a>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white">
          <div className="max-w-md">
            <h1 className="mb-5 text-5xl font-bold">Khóa học đa dạng</h1>
            <p className="mb-5">
              Khám phá hàng trăm khóa học từ cơ bản đến nâng cao!
            </p>
            <Link to="/courses" className="btn btn-primary">
              Khám phá ngay
            </Link>
          </div>
        </div>
      </div>
      <div id="slide3" className="carousel-item relative w-full">
        <img
          src="https://placehold.co/1200x400?text=Hero+Image+3"
          className="w-full"
          alt="slide 3"
        />
        <div className="hero-overlay bg-opacity-60 absolute inset-0"></div>
        <div className="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
          <a href="#slide2" className="btn btn-circle">
            ❮
          </a>
          <a href="#slide4" className="btn btn-circle">
            ❯
          </a>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white">
          <div className="max-w-md">
            <h1 className="mb-5 text-5xl font-bold">Học mọi lúc, mọi nơi</h1>
            <p className="mb-5">
              Tham gia các khóa học trực tuyến chất lượng cao để nâng cao kỹ
              năng của bạn!
            </p>
            <Link to="/courses" className="btn btn-primary">
              Khám phá ngay
            </Link>
          </div>
        </div>
      </div>
      <div id="slide4" className="carousel-item relative w-full">
        <img
          src="https://placehold.co/1200x400?text=Hero+Image+4"
          className="w-full"
          alt="slide 4"
        />
        <div className="hero-overlay bg-opacity-60 absolute inset-0"></div>
        <div className="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
          <a href="#slide3" className="btn btn-circle">
            ❮
          </a>
          <a href="#slide1" className="btn btn-circle">
            ❯
          </a>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white">
          <div className="max-w-md">
            <h1 className="mb-5 text-5xl font-bold">Học cùng cộng đồng</h1>
            <p className="mb-5">
              Kết nối với hàng ngàn học viên trên toàn thế giới!
            </p>
            <Link to="/courses" className="btn btn-primary">
              Khám phá ngay
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Slider;
</file>

<file path="apps/student-app/src/app/pages/home/Home.tsx">
import { CourseType } from '../../types/CourseType';
import Slider from '../../components/ui/Slider';
import SectionCourse from './SectionCourse';
import Footer from '../../components/layout/Footer';
import { useGlobalContext } from '../../components/common/GlobalContex';
import { translate } from '../../components/common/translate/translate';

const courses: CourseType[] = [
  {
    id: 1,
    title: 'Lập trình JavaScript Cơ bản',
    type: 'free',
    image: 'https://placehold.co/300x200',
    price: 0,
    isNew: true,
  },
  {
    id: 2,
    title: 'React Nâng cao',
    type: 'paid',
    image: 'https://placehold.co/300x200',
    price: 499000,
    isNew: false,
  },
  {
    id: 3,
    title: 'HTML & CSS cho người mới',
    type: 'free',
    image: 'https://placehold.co/300x200',
    price: 0,
    isNew: true,
  },
  {
    id: 4,
    title: 'Node.js Chuyên sâu',
    type: 'paid',
    image: 'https://placehold.co/300x200',
    price: 799000,
    isNew: true,
  },
];

const Home = () => {
  const { language } = useGlobalContext();
  return (
    <div className="min-h-screen bg-gray-100">
      {/* Slider */}
      <Slider />

      {/* Free Courses */}
      <SectionCourse title={translate('NEW_COURSE')} courses={courses} />

      {/* Paid Courses */}
      <SectionCourse title={translate('FREE_COURSE')} courses={courses} />

      {/* Latest Courses */}
      <SectionCourse title={translate('PAID_COURSE')} courses={courses} />

      {/* Footer */}
      <Footer />
    </div>
  );
};

export default Home;
</file>

<file path="apps/student-app/src/app/pages/home/SectionCourse.tsx">
import Course from '../../components/ui/Course';
import { CourseType } from '../../types/CourseType';

interface SectionCourseProps {
  title: string;
  courses: CourseType[];
}

const SectionCourse = ({ courses, title }: SectionCourseProps) => {
  return (
    <section className="py-12 px-4 bg-base-300">
      <h2 className="text-3xl font-bold text-center mb-8">{title}</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {courses.map((course) => (
          <Course key={course.id} course={course} />
        ))}
      </div>
    </section>
  );
};

export default SectionCourse;
</file>

<file path="apps/student-app/src/app/pages/login/Login.tsx">
import { BookOpen, FacebookLogo, GoogleLogo } from 'phosphor-react';
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleLogin = () => {
    // Giả lập đăng nhập thành công
    if (username && password) {
      navigate('/'); // Điều hướng về trang chủ sau khi đăng nhập
    }
  };

  return (
    <div
      className="min-h-screen flex items-center justify-center bg-cover bg-center"
      style={{
        backgroundImage:
          'url(https://placehold.co/1200x800?text=Background+Image)',
      }}
    >
      <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md">
        {/* Logo */}
        <div className="flex justify-center mb-6">
          <h1 className="text-3xl font-bold text-blue-600 flex items-center">
            <BookOpen size={32} /> E-Learning
          </h1>
        </div>

        {/* Form */}
        <div className="space-y-4">
          <div className="form-control">
            <input
              type="text"
              placeholder="Email..."
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="input input-bordered w-full"
            />
          </div>
          <div className="form-control">
            <input
              type="password"
              placeholder="Mật khẩu..."
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="input input-bordered w-full"
            />
          </div>
          <button onClick={handleLogin} className="btn btn-primary w-full">
            Đăng nhập
          </button>
        </div>

        {/* Divider */}
        <div className="divider my-6">HOẶC</div>

        {/* Social Login Buttons */}
        <div className="space-y-3">
          <button className="btn btn-outline w-full flex items-center justify-center">
            <GoogleLogo size={24} weight="bold" />
            Đăng nhập qua Google
          </button>
          <button className="btn btn-outline w-full flex items-center justify-center">
            <FacebookLogo size={24} weight="bold" />
            Đăng nhập qua Facebook
          </button>
        </div>

        {/* Register Link */}
        <div className="text-center mt-4">
          <p>
            Bạn chưa có tài khoản?{' '}
            <Link to="/register" className="text-blue-600 hover:underline">
              Đăng ký ngay
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;
</file>

<file path="apps/student-app/src/app/types/CourseType.tsx">
export type CourseType = {
  id: number;
  title: string;
  image: string;
  type: 'free' | 'paid';
  price: number;
  isNew: boolean;
};
</file>

<file path="apps/student-app/src/app/types/LanguageType.tsx">
export const LanguageCode = {
  vi: 'vi',
  en: 'en',
};
export type LanguageType = keyof typeof LanguageCode;
export const LanguageFlag = {
  [LanguageCode.vi]: './icons/vi-icon.png',
  [LanguageCode.en]: './icons/en-icon.png',
};

export const LanguageList = [
  {
    code: LanguageCode.vi as LanguageType,
    flag: LanguageFlag[LanguageCode.vi],
  },
  {
    code: LanguageCode.en as LanguageType,
    flag: LanguageFlag[LanguageCode.en],
  },
];
</file>

<file path="apps/student-app/src/styles.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
/* You can add global styles to this file, and also import other style files */
</file>

<file path="apps/student-app/tsconfig.app.json">
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "dist",
    "tsBuildInfoFile": "dist/tsconfig.app.tsbuildinfo",
    "jsx": "react-jsx",
    "lib": ["dom"],
    "types": [
      "node",
      "@nx/react/typings/cssmodule.d.ts",
      "@nx/react/typings/image.d.ts",
      "vite/client"
    ],
    "rootDir": "src"
  },
  "exclude": [
    "out-tsc",
    "dist",
    "src/**/*.spec.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.tsx",
    "src/**/*.test.tsx",
    "src/**/*.spec.js",
    "src/**/*.test.js",
    "src/**/*.spec.jsx",
    "src/**/*.test.jsx",
    "eslint.config.js",
    "eslint.config.cjs",
    "eslint.config.mjs"
  ],
  "include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]
}
</file>

<file path="apps/student-app/tsconfig.json">
{
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    }
  ],
  "extends": "../../tsconfig.base.json"
}
</file>

<file path="apps/teacher-app/eslint.config.mjs">
import nx from '@nx/eslint-plugin';
import baseConfig from '../../eslint.config.mjs';

export default [
  ...baseConfig,
  ...nx.configs['flat/react'],
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],
    // Override or add rules here
    rules: {},
  },
];
</file>

<file path="apps/teacher-app/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>TeacherApp</title>
    <base href="/" />

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="stylesheet" href="/src/styles.css" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="apps/teacher-app/package.json">
{
  "name": "teacher-app",
  "version": "0.0.1",
  "private": true
}
</file>

<file path="apps/teacher-app/postcss.config.js">
const { join } = require('path');

// Note: If you use library-specific PostCSS/Tailwind configuration then you should remove the `postcssConfig` build
// option from your application's configuration (i.e. project.json).
//
// See: https://nx.dev/guides/using-tailwind-css-in-react#step-4:-applying-configuration-to-libraries

module.exports = {
  plugins: {
    tailwindcss: {
      config: join(__dirname, 'tailwind.config.js'),
    },
    autoprefixer: {},
  },
};
</file>

<file path="apps/teacher-app/src/app/components/common/GlobalContext.tsx">
import { createContext, useContext, useEffect, useState } from 'react';
import { LanguageType } from '../../types/LanguageType';

export interface GlobalType {
  language: LanguageType;
  setLanguage: (language: LanguageType) => void;
}

export const GlobalContext = createContext<GlobalType | undefined>(undefined);
export const GlobalContextProvider = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  const [language, setLanguage] = useState<LanguageType>('vi');

  useEffect(() => {
    const storedLanguage = localStorage.getItem('language') as LanguageType;
    if (storedLanguage) {
      setLanguage(storedLanguage);
    }
  }, []);

  return (
    <GlobalContext.Provider
      value={{
        language,
        setLanguage,
      }}
    >
      {children}
    </GlobalContext.Provider>
  );
};

export const useGlobalContext = () => {
  const context = useContext(GlobalContext);
  if (!context) {
    throw new Error('not exist context');
  }

  const changeLanguage = (language: LanguageType) => {
    localStorage.setItem('language', language);
    context.setLanguage(language);
  };

  return { ...context, changeLanguage };
};
</file>

<file path="apps/teacher-app/src/app/components/common/translate/dashboard.translate.tsx">
export default {
  HOME: {
    vi: 'Trang chủ',
    en: 'Home',
  },
  AUTHORIZATION: {
    vi: 'Phân quyền',
    en: 'Authorization',
  },
  USERS: {
    vi: 'Người dùng',
    en: 'Users',
  },
};
</file>

<file path="apps/teacher-app/src/app/components/common/translate/user-management.translate.tsx">
export default {
  USER_MANAGEMENT: {
    vi: 'Quản lý người dùng',
    en: 'User Management',
  },
  USER_NAME: {
    vi: 'Tên người dùng',
    en: 'User Name',
  },
  USER_ROLE: {
    vi: 'Vai trò',
    en: 'Role',
  },
  ACTION: {
    vi: 'Hành động',
    en: 'Action',
  },
  ADD_USER: {
    vi: 'Thêm người dùng',
    en: 'Add User',
  },
  EDIT: {
    vi: 'Chỉnh sửa',
    en: 'Edit',
  },
  DELETE: {
    vi: 'Xóa',
    en: 'Delete',
  },
  USER_LIST: {
    vi: 'Danh sách người dùng',
    en: 'User List',
  },
  USER_ID: {
    vi: 'ID người dùng',
    en: 'User ID',
  },
  CREATED_AT: {
    vi: 'Ngày tạo',
    en: 'Created At',
  },
};
</file>

<file path="apps/teacher-app/src/app/components/layout/Header.tsx">
import { Link } from 'react-router-dom';
import { useGlobalContext } from '../common/GlobalContext';
import { LanguageFlag, LanguageList } from '../../types/LanguageType';
import { translate } from '../common/translate/translate';
import SideBar from './SideBar';

const Header = () => {
  const { language, changeLanguage } = useGlobalContext();
  console.log('language', language);

  return (
    <header className="bg-blue-900 text-white p-2 flex items-center justify-between sticky top-0 z-50 text-lg px-8">
      <div className="flex items-center space-x-4">
        {/* <Link to="/" className="flex items-center">
          <img src="./logo.png" alt="logo" width={'60px'} />
        </Link> */}
        <div>
          <SideBar />
        </div>
      </div>
      <div className="flex items-center space-x-2 text-black">
        {/* <Link to="/profile" className="bg-gray-300 p-2 rounded-full">
          <svg
            className="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
        </Link> */}
        <div>
          <Link to="/login" className="btn btn-primary text-lg">
            {translate('LOGIN')}
          </Link>
        </div>
        <div className="dropdown dropdown-end">
          <div tabIndex={0} role="button" className="btn btn-ghost">
            <img src={LanguageFlag[language]} width={'48px'} alt="icon" />
          </div>
          <ul
            tabIndex={0}
            className="dropdown-content menu bg-base-100 rounded-box z-[1] w-24 p-2 shadow"
          >
            {LanguageList.map((item) => (
              <li
                key={item.code}
                onClick={() => {
                  changeLanguage(item.code);
                }}
              >
                <div>
                  <img src={item.flag} width={'24px'} alt="icon" />
                  {item.code}
                </div>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </header>
  );
};

export default Header;
</file>

<file path="apps/teacher-app/src/app/components/ui/button.tsx">
import React from 'react';

export const Button = ({ children, ...props }: React.ButtonHTMLAttributes<HTMLButtonElement>) => {
  return (
    <button className="px-4 py-2 bg-blue-500 text-white rounded" {...props}>
      {children}
    </button>
  );
};
</file>

<file path="apps/teacher-app/src/app/components/ui/Input.tsx">
interface InputProps {
  title: string;
  placeholder: string;
  type:
    | 'email'
    | 'password'
    | 'text'
    | 'number'
    | 'tel'
    | 'url'
    | 'search'
    | 'date'
    | 'datetime-local'
    | 'month'
    | 'week'
    | 'time'
    | 'color'
    | 'file'
    | 'hidden'
    | 'image'
    | 'range'
    | 'checkbox'
    | 'radio'
    | 'button'
    | 'submit'
    | 'reset';
  name: string;
  value?: string | number;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
  error?: string;
  required?: boolean;
  disabled?: boolean;
  className?: string;
}

const Input = ({
  title,
  placeholder,
  type,
  name,
  value,
  onChange,
  error,
  required = false,
  disabled = false,
  className = '',
}: InputProps) => {
  return (
    <div className="form-control">
      <label className="label">
        <span className="label-text">{title}</span>
      </label>
      <input
        type={type}
        name={name}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        className={`input input-bordered w-full ${
          error ? 'input-error' : ''
        } ${className}`}
        required={required}
        disabled={disabled}
      />
      {error && <span className="text-error text-sm mt-1">{error}</span>}
    </div>
  );
};

export default Input;
</file>

<file path="apps/teacher-app/src/app/pages/course/api.ts">
import axios from 'axios';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || '/api';

export async function createCourseAPI(course: any) {
  try {
    const formData = new FormData();
    
    // Append all course data
    Object.keys(course).forEach(key => {
      if (key !== 'image' && key !== 'lessons') {
        formData.append(key, course[key]);
      }
    });

    // Append image if it's a File
    if (course.image instanceof File) {
      formData.append('image', course.image);
    }

    // Append lessons
    formData.append('lessons', JSON.stringify(course.lessons));

    const res = await axios.post(`${API_BASE_URL}/courses`, formData, {
      headers: { 
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'multipart/form-data'
      },
    });
    return res.data;
  } catch (e) {
    console.error('Error creating course:', e);
    throw new Error('Lỗi tạo khóa học');
  }
}

export async function createLessonAPI(lesson: any) {
  try {
    const formData = new FormData();
    formData.append('title', lesson.title);
    formData.append('content', lesson.content);
    formData.append('courseId', lesson.courseId);
    
    if (lesson.videoUrl instanceof File) {
      formData.append('video', lesson.videoUrl);
    }

    const res = await axios.post(`${API_BASE_URL}/lessons`, formData, {
      headers: { 
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'multipart/form-data'
      },
    });
    return res.data;
  } catch (e) {
    console.error('Error creating lesson:', e);
    throw new Error('Lỗi tạo bài học');
  }}
</file>

<file path="apps/teacher-app/src/app/pages/course/CourseForm.tsx">
import { useState, useEffect, useRef } from 'react';
import { Plus, ArrowLeft, BookOpen, DollarSign, Image as ImageIcon, List, FileText, Video, Save, Upload, X } from 'lucide-react';
import { Course, Lesson } from './types';

interface CourseFormProps {
  course: Course;
  onCourseChange: (course: Course) => void;
  onAddLessonClick: () => void;
}

export default function CourseForm({ course, onCourseChange, onAddLessonClick }: CourseFormProps) {
  const [localCourse, setLocalCourse] = useState(course);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    return () => {
      if (imagePreview) URL.revokeObjectURL(imagePreview);
    };
  }, [imagePreview]);

  const handleChange = (field: keyof Course, value: any) => {
    setLocalCourse((prev) => ({ ...prev, [field]: value }));
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Create preview URL
      const previewUrl = URL.createObjectURL(file);
      setImagePreview(previewUrl);
      
      // You would typically upload the file to your server here
      // and then set the returned URL to localCourse.image
      // For now, we'll just store the file object
      handleChange('image', file);
    }
  };

  const removeImage = () => {
    setImagePreview(null);
    handleChange('image', '');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    try {
      // Here you would actually upload the files to your server
      // and get the URLs before saving the course
      await new Promise(resolve => setTimeout(resolve, 800)); // Simulate API call
      onCourseChange(localCourse);
      console.log('Submit course data:', localCourse);
      alert('✅ Thông tin khóa học đã được lưu thành công');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white rounded-xl shadow-lg border border-gray-100">
      <h1 className="text-3xl font-bold mb-6 text-gray-800 flex items-center gap-2">
        <BookOpen className="text-indigo-600" size={28} />
        {course.title ? course.title : 'Tạo khóa học mới'}
      </h1>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-5">
          {/* Course Title */}
          <div className="relative">
            <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
              Tên khóa học <span className="text-red-500">*</span>
            </label>
            <div className="relative">
              <input
                id="title"
                type="text"
                placeholder="Nhập tên khóa học"
                value={localCourse.title}
                onChange={(e) => handleChange('title', e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                required
              />
              <BookOpen className="absolute left-3 top-3.5 text-gray-400" size={18} />
            </div>
          </div>

          {/* Course Description */}
          <div>
            <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
              Mô tả khóa học
            </label>
            <div className="relative">
              <textarea
                id="description"
                placeholder="Mô tả chi tiết về khóa học..."
                value={localCourse.description}
                onChange={(e) => handleChange('description', e.target.value)}
                rows={4}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
              />
              <FileText className="absolute left-3 top-3.5 text-gray-400" size={18} />
            </div>
          </div>

          {/* Image Upload */}
          <div>
            <label htmlFor="image" className="block text-sm font-medium text-gray-700 mb-1">
              Ảnh đại diện
            </label>
            <div className="space-y-3">
              {imagePreview ? (
                <div className="relative">
                  <img 
                    src={imagePreview} 
                    alt="Course preview" 
                    className="w-full h-48 object-cover rounded-lg border border-gray-200"
                  />
                  <button
                    type="button"
                    onClick={removeImage}
                    className="absolute top-2 right-2 bg-red-500 text-white p-1 rounded-full hover:bg-red-600 transition"
                  >
                    <X size={16} />
                  </button>
                </div>
              ) : (
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-indigo-400 transition">
                  <div className="flex flex-col items-center justify-center gap-2">
                    <Upload className="text-gray-400" size={24} />
                    <p className="text-sm text-gray-500">Kéo thả ảnh vào đây hoặc click để chọn</p>
                    <input
                      id="image"
                      type="file"
                      ref={fileInputRef}
                      onChange={handleImageUpload}
                      accept="image/*"
                      className="hidden"
                    />
                    <button
                      type="button"
                      onClick={() => fileInputRef.current?.click()}
                      className="mt-2 bg-indigo-50 text-indigo-600 hover:bg-indigo-100 px-4 py-2 rounded-md text-sm font-medium transition"
                    >
                      Chọn ảnh
                    </button>
                  </div>
                </div>
              )}
              <p className="text-xs text-gray-500">Định dạng hỗ trợ: JPG, PNG, GIF. Kích thước tối đa: 5MB</p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
            {/* Price */}
            <div className="relative">
              <label htmlFor="price" className="block text-sm font-medium text-gray-700 mb-1">
                Giá khóa học (VND)
              </label>
              <div className="relative">
                <input
                  id="price"
                  type="number"
                  placeholder="0"
                  value={localCourse.price || ''}
                  onChange={(e) => handleChange('price', parseFloat(e.target.value) || 0)}
                  className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                />
                <DollarSign className="absolute left-3 top-3.5 text-gray-400" size={18} />
              </div>
            </div>

            {/* Category */}
            <div className="relative">
              <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
                Danh mục
              </label>
              <div className="relative">
                <input
                  id="category"
                  type="text"
                  placeholder="Ví dụ: Lập trình, Thiết kế..."
                  value={localCourse.category}
                  onChange={(e) => handleChange('category', e.target.value)}
                  className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                />
                <List className="absolute left-3 top-3.5 text-gray-400" size={18} />
              </div>
            </div>
          </div>
        </div>

        <div className="flex flex-col sm:flex-row gap-3 pt-2">
          <button
            type="submit"
            disabled={isSubmitting}
            className="flex-1 bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-2 disabled:opacity-70"
          >
            <Save size={18} />
            {isSubmitting ? 'Đang lưu...' : 'Lưu khóa học'}
          </button>

          <button
            type="button"
            onClick={onAddLessonClick}
            className="flex-1 bg-emerald-600 hover:bg-emerald-700 text-white font-medium py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-2"
          >
            <Plus size={18} />
            Thêm bài học
          </button>
        </div>
      </form>

      {localCourse.lessons.length > 0 && (
        <div className="mt-8 border-t pt-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
            <List size={20} />
            Danh sách bài học ({localCourse.lessons.length})
          </h3>
          <ul className="space-y-2">
            {localCourse.lessons.map((lesson, idx) => (
              <li key={idx} className="bg-gray-50 hover:bg-gray-100 p-3 rounded-lg border border-gray-200 transition">
                <div className="flex items-center gap-3">
                  <span className="bg-indigo-100 text-indigo-800 w-6 h-6 rounded-full flex items-center justify-center text-sm font-medium">
                    {idx + 1}
                  </span>
                  <span className="font-medium text-gray-800">{lesson.title}</span>
                </div>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );}
</file>

<file path="apps/teacher-app/src/app/pages/course/create_course.tsx">
'use client';
import { useState, useEffect } from 'react';
import CourseForm from './CourseForm';
import { LessonForm } from './LessonForm';
import { Course, Lesson } from './types';
import { uploadFile } from '../../../../src/services/upload.service';
import { createCourseAPI } from './api';

export default function CreateCoursePage() {
  const [course, setCourse] = useState<Course>({
    title: '',
    description: '',
    image: null,
    price: 0,
    category: '',
    teacherId: 1,
    lessons: [],
  });
  const [lessons, setLessons] = useState<Lesson[]>([]);
  const [showLessonForm, setShowLessonForm] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleCourseChange = (updatedCourse: Course) => {
    setCourse(updatedCourse);
  };

  const handleAddLesson = (lesson: Lesson) => {
    setLessons((prev) => [...prev, lesson]);
    setShowLessonForm(false);
};

  const handleBackFromLesson = () => {
    if (showLessonForm) {
      const confirmBack = window.confirm('⚠️ Thông tin bài học chưa được lưu, bạn có chắc muốn quay lại?');
      if (confirmBack) {
        setShowLessonForm(false);
      }
    }
  };

  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (course.title || lessons.length > 0) {
        e.preventDefault();
        e.returnValue = 'Bạn có chắc muốn rời đi? Thông tin khóa học chưa được lưu sẽ bị mất.';
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, [course, lessons]);

  const handleSubmitCourse = async () => {
    if (!course.title) {
      alert('Vui lòng nhập tên khóa học');
      return;
    }

    setIsSubmitting(true);
    try {
      // Upload image if exists
      let imageUrl = '';
      if (course.image instanceof File) {
        imageUrl = await uploadFile(course.image);
      }

      // Prepare course data
      const courseData = {
        ...course,
        image: imageUrl,
        lessons: lessons.map(lesson => ({
          ...lesson,
          // Remove file object before sending
          file: undefined
        }))
      };

      // Submit to API
      const result = await createCourseAPI(courseData);
      
      if (result.success) {
        alert('✅ Khóa học đã được tạo thành công!');
        // Reset form
        setCourse({
          title: '',
          description: '',
          image: null,
          price: 0,
          category: '',
          teacherId: 1,
          lessons: [],
        });
        setLessons([]);
      } else {
        throw new Error('Failed to create course');
      }
    } catch (error) {
      console.error('Error creating course:', error);
      alert('❌ Có lỗi xảy ra khi tạo khóa học');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-10 bg-white shadow-2xl rounded-2xl">
      <h1 className="text-3xl font-bold text-gray-800">Tạo Khóa Học Mới</h1>
      
      {!showLessonForm ? (
        <>
          <CourseForm
            course={{ ...course, lessons }}
            onCourseChange={handleCourseChange}
            onAddLessonClick={() => setShowLessonForm(true)}
          />
          
          <div className="flex justify-end gap-4 pt-4">
            <button
              onClick={handleSubmitCourse}
              disabled={isSubmitting || !course.title}
              className={`px-6 py-3 rounded-lg font-medium shadow-md transition-all ${
                isSubmitting || !course.title
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-indigo-600 hover:bg-indigo-700 text-white'
              }`}
            >
              {isSubmitting ? 'Đang tạo khóa học...' : 'Tạo Khóa Học'}
            </button>
          </div>
        </>
      ) : (
        <LessonForm
          onBack={handleBackFromLesson}
          onSubmit={handleAddLesson}
        />
      )}
    </div>
  );}
</file>

<file path="apps/teacher-app/src/app/pages/course/LessonForm.tsx">
import React, { useState, useRef } from 'react';
import { Plus, ArrowLeft, BookOpen, FileText, FloppyDisk , X } from 'phosphor-react';
import { Lesson } from './types';
interface LessonFormProps {
  onBack: () => void;
  onSubmit: (lesson: Lesson) => void;
}

export function LessonForm({ onBack, onSubmit }: LessonFormProps) {
  const [title, setTitle] = useState('');
  const [videoFile, setVideoFile] = useState<File | null>(null);
  const [videoPreview, setVideoPreview] = useState<string | null>(null);
  const [content, setContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const videoInputRef = useRef<HTMLInputElement>(null);

  const handleVideoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setVideoFile(file);
      
      // Create preview for video (shows first frame if possible)
      const previewUrl = URL.createObjectURL(file);
      setVideoPreview(previewUrl);
    }
  };

  const removeVideo = () => {
    setVideoFile(null);
    setVideoPreview(null);
    if (videoInputRef.current) {
      videoInputRef.current.value = '';
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    try {
      // Here you would upload the video file to your server
      // and get the URL before saving the lesson
      await new Promise(resolve => setTimeout(resolve, 800)); // Simulate API call
      
      // For now, we'll just pass the file object
      // In a real app, you'd pass the URL returned from your server
      onSubmit({ 
        title, 
        videoUrl: videoFile ? URL.createObjectURL(videoFile) : '', 
        content 
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleBack = () => {
    if (title || videoFile || content) {
      const confirmBack = window.confirm('⚠️ Thông tin bài học chưa được lưu, bạn có chắc muốn quay lại?');
      if (!confirmBack) return;
    }
    onBack();
  };

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white rounded-xl shadow-lg border border-gray-100">
      <button 
        onClick={handleBack} 
        className="text-indigo-600 hover:text-indigo-800 font-medium mb-4 flex items-center gap-1 transition"
      >
        <ArrowLeft size={18} />
        Quay lại
      </button>
      
      <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-2">
        <Plus className="text-emerald-600" size={24} />
        Thêm bài học mới
      </h2>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-5">
          {/* Lesson Title */}
          <div className="relative">
            <label htmlFor="lessonTitle" className="block text-sm font-medium text-gray-700 mb-1">
              Tiêu đề bài học <span className="text-red-500">*</span>
            </label>
            <div className="relative">
              <input
                id="lessonTitle"
                type="text"
                placeholder="Nhập tiêu đề bài học"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                required
              />
              <BookOpen className="absolute left-3 top-3.5 text-gray-400" size={18} />
            </div>
          </div>

          {/* Video Upload */}
          <div>
            <label htmlFor="video" className="block text-sm font-medium text-gray-700 mb-1">
              Video bài giảng
            </label>
            <div className="space-y-3">
              {videoPreview ? (
                <div className="relative">
                  <div className="w-full h-48 sm:h-64 md:h-80 bg-black rounded-lg flex items-center justify-center">
                    <video src={videoPreview} controls className="max-h-full max-w-full" />
                  </div>
                  <button
                    type="button"
                    onClick={removeVideo}
                    className="absolute top-2 right-2 bg-red-500 text-white p-1 rounded-full hover:bg-red-600 transition"
                  >
                    <X size={16} />
                  </button>
                </div>
              ) : (
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-indigo-400 transition">
                    <div className="flex flex-col items-center justify-center gap-2">
                    <video className="text-gray-400" width={48} height={48} />
                    <p className="text-sm text-gray-500">Kéo thả video vào đây hoặc click để chọn</p>
                    <input
                      id="video"
                      type="file"
                      ref={videoInputRef}
                      onChange={handleVideoUpload}
                      accept="video/mp4,video/mov,video/avi"
                      className="hidden"
                    />
                    <button
                      type="button"
                      onClick={() => videoInputRef.current?.click()}
                      className="mt-2 bg-indigo-50 text-indigo-600 hover:bg-indigo-100 px-4 py-2 rounded-md text-sm font-medium transition"
                    >
                      Chọn video
                    </button>
                    </div>
                </div>
              )}
              <p className="text-xs text-gray-500">Định dạng hỗ trợ: MP4, MOV, AVI. Kích thước tối đa: 100MB</p>
            </div>
          </div>

          {/* Lesson Content */}
          <div>
            <label htmlFor="lessonContent" className="block text-sm font-medium text-gray-700 mb-1">
              Nội dung bài học
            </label>
            <div className="relative">
              <textarea
                id="lessonContent"
                placeholder="Nội dung chi tiết bài học..."
                value={content}
                onChange={(e) => setContent(e.target.value)}
                rows={6}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
              />
              <FileText className="absolute left-3 top-3.5 text-gray-400" size={18} />
            </div>
          </div>
        </div>

        <button
          type="submit"
          disabled={isSubmitting}
          className="w-full bg-emerald-600 hover:bg-emerald-700 text-white font-medium py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-2 disabled:opacity-70"
        >
          <FloppyDisk  size={18} />
          {isSubmitting ? 'Đang lưu...' : 'Lưu bài học'}
        </button>
      </form>
    </div>
  );}
</file>

<file path="apps/teacher-app/src/app/pages/course/LessonList.tsx">
import { Lesson } from './types';

export function LessonList({ lessons }: { lessons: Lesson[] }) {
  return (
    <div className="mt-6">
      <h3 className="text-lg font-medium mb-2">Danh sách bài học đã thêm</h3>
      <ul className="list-disc pl-6 space-y-1">
        {lessons.map((l, idx) => <li key={idx}>{l.title}</li>)}
      </ul>
    </div>
  );
}
</file>

<file path="apps/teacher-app/src/app/pages/course/types.ts">
// In types.ts
export interface Lesson {
  title: string;
  videoUrl: string;
  content: string;
  file?: File;
}

export interface Course {
  title: string;
  description: string;
  image: string;
  price: number;
  category: string;
  teacherId: number;
  lessons: Lesson[];

}
</file>

<file path="apps/teacher-app/src/app/pages/login/ForgotPassword.tsx">
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft, Mail, Loader2 } from 'lucide-react';

const ForgotPassword = () => {
  const [email, setEmail] = useState<string>('');
  const [isSent, setIsSent] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const navigate = useNavigate();

  const handleSendOtp = async () => {
    if (!email) {
      setError('Vui lòng nhập email');
      return;
    }

  try {
      setIsSent(true);
      setError('');
      // Giả lập gửi OTP
      await new Promise((resolve) => setTimeout(resolve, 1500));
      setIsSent(true);
      navigate('/verify-otp', { state: { email } });
    } catch (err) {
      setError('Email không tồn tại trong hệ thống.');
      setIsSent(false);
    }
  };

  const handleBackToLogin = () => {
    navigate('/login');
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-100 via-purple-100 to-blue-200 px-4">
      <div className="bg-white p-8 rounded-2xl shadow-xl w-full max-w-md border border-gray-100">
        {/* Logo */}
        <div className="flex flex-col items-center mb-6">
          <img
            src="../../../../public/logo.png"
            alt="E-Learning Logo"
            className="h-28 mb-2"
          />
          <h1 className="text-2xl font-semibold text-gray-700">Quên mật khẩu</h1>
        </div>

        <p className="text-center text-gray-600 mb-6 text-sm">
          Nhập email để nhận mã xác nhận
        </p>

        {/* Form */}
        <div className="space-y-5">
          <div className="relative">
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <div className="relative">
              <input
                id="email"
                type="email"
                placeholder="Nhập email đã đăng ký"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition bg-gray-50"
                disabled={isSent}
              />
              <Mail className="absolute left-3 top-3.5 text-gray-400" size={18} />
            </div>
          </div>

          {/* Thông báo lỗi hoặc thành công */}
          {error && <p className="text-red-500 text-sm text-center">{error}</p>}
          {isSent && !error && (
            <p className="text-green-600 text-sm text-center">
              Mã xác nhận đã được gửi đến {email}
            </p>
          )}

          {/* Nút Gửi mã xác nhận */}
          <button
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-2 disabled:opacity-70"
            onClick={handleSendOtp}
            disabled={isSent}
          >
            {isSent ? (
              <>
                <Loader2 className="animate-spin" size={18} />
                Đang gửi...
              </>
            ) : (
              'Gửi mã xác nhận'
            )}
          </button>

          {/* Nút Quay lại đăng nhập */}
          <button
            type="button"
            onClick={handleBackToLogin}
            className="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-3 rounded-lg transition-all duration-200 flex items-center justify-center gap-2"
          >
            <ArrowLeft size={18} />
          </button>
        </div>
      </div>
    </div>
  );
};export default ForgotPassword;
</file>

<file path="apps/teacher-app/src/app/pages/user-management/UserManagement.tsx">
import { useState } from 'react';
import AddUserModal from './AddUserModal';
import { translate } from '../../components/common/translate/translate';
import { useGlobalContext } from '../../components/common/GlobalContext';

const initialUsers = [
  {
    id: 1,
    name: 'Nguyễn Văn A',
    email: 'nva@example.com',
    role: 'Admin',
    createdAt: '2023-10-01',
  },
  {
    id: 2,
    name: 'Trần Thị B',
    email: 'ttb@example.com',
    role: 'User',
    createdAt: '2023-10-02',
  },
  {
    id: 3,
    name: 'Lê Văn C',
    email: 'lvc@example.com',
    role: 'Editor',
    createdAt: '2023-10-03',
  },
];
const UserManagement = () => {
  const [users, setUsers] = useState(initialUsers);
  const { language } = useGlobalContext();
  // Hàm xử lý xóa người dùng
  const handleDelete = (id: number) => {
    setUsers(users.filter((user) => user.id !== id));
  };
  return (
    <div className="space-y-6 ">
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-bold">{translate('USER_MANAGEMENT')}</h2>
        <AddUserModal id={'add-user'} />
        <button
          className="btn btn-primary"
          onClick={() => {
            const modal = document.getElementById(
              'add-user'
            ) as HTMLDialogElement | null;
            if (modal) {
              modal.showModal();
            }
          }}
        >
          {translate('ADD_USER')}
        </button>
      </div>

      <div className="overflow-x-auto">
        <table className="table w-full ">
          <thead>
            <tr>
              <th>ID</th>
              <th>{translate('USER_NAME')}</th>
              <th>Email</th>
              <th>{translate('USER_ROLE')}</th>
              <th>{translate('CREATED_AT')}</th>
              <th>{translate('ACTION')}</th>
            </tr>
          </thead>
          <tbody>
            {users.map((user) => (
              <tr key={user.id}>
                <td>{user.id}</td>
                <td>{user.name}</td>
                <td>{user.email}</td>
                <td>{user.role}</td>
                <td>{user.createdAt}</td>
                <td>
                  <button className="btn btn-info btn-sm">
                    {translate('EDIT')}
                  </button>
                  <button
                    className="btn btn-error btn-sm ml-2"
                    onClick={() => handleDelete(user.id)}
                  >
                    {translate('DELETE')}
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default UserManagement;
</file>

<file path="apps/teacher-app/src/app/pages/user-management/UserManagementContext.tsx">
import { createContext, useContext, useState } from 'react';
export interface UserManagementContextType {
  isLoading: boolean;
  setIsLoading: (isLoading: boolean) => void;
  isOpenAddUserModal: boolean;
  setIsOpenAddUserModal: (isOpen: boolean) => void;
  isOpenEditUserModal: boolean;
  setIsOpenEditUserModal: (isOpen: boolean) => void;
}

export const UserManagementContext = createContext<
  UserManagementContextType | undefined
>(undefined);
export const UserManagementContextProvider = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [isOpenAddUserModal, setIsOpenAddUserModal] = useState(false);
  const [isOpenEditUserModal, setIsOpenEditUserModal] = useState(false);

  return (
    <UserManagementContext.Provider
      value={{
        isLoading,
        setIsLoading,
        isOpenAddUserModal,
        setIsOpenAddUserModal,
        isOpenEditUserModal,
        setIsOpenEditUserModal,
      }}
    >
      {children}
    </UserManagementContext.Provider>
  );
};

export const useUserManagementContext = () => {
  const context = useContext(UserManagementContext);
  if (!context) {
    throw new Error('not exist context');
  }
  return context;
};
</file>

<file path="apps/teacher-app/src/app/types/LanguageType.tsx">
export const LanguageCode = {
  vi: 'vi',
  en: 'en',
};
export type LanguageType = keyof typeof LanguageCode;
export const LanguageFlag = {
  [LanguageCode.vi]: './icons/vi-icon.png',
  [LanguageCode.en]: './icons/en-icon.png',
};

export const LanguageList = [
  {
    code: LanguageCode.vi as LanguageType,
    flag: LanguageFlag[LanguageCode.vi],
  },
  {
    code: LanguageCode.en as LanguageType,
    flag: LanguageFlag[LanguageCode.en],
  },
];
</file>

<file path="apps/teacher-app/src/main.tsx">
import { StrictMode } from 'react';
import * as ReactDOM from 'react-dom/client';
import App from './app/app';
import { BrowserRouter } from 'react-router-dom';
import { GlobalContextProvider } from './app/components/common/GlobalContext';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <GlobalContextProvider>
    <BrowserRouter>
      <StrictMode>
        <App />
      </StrictMode>
    </BrowserRouter>
  </GlobalContextProvider>
);
</file>

<file path="apps/teacher-app/src/styles.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
/* You can add global styles to this file, and also import other style files */
</file>

<file path="apps/teacher-app/tailwind.config.js">
const { createGlobPatternsForDependencies } = require('@nx/react/tailwind');
const { join } = require('path');

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    join(
      __dirname,
      '{src,pages,components,app}/**/*!(*.stories|*.spec).{ts,tsx,html}'
    ),
    ...createGlobPatternsForDependencies(__dirname),
  ],
  theme: {
    extend: {},
  },
  plugins: [require('daisyui')],
};
</file>

<file path="apps/teacher-app/tsconfig.app.json">
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "dist",
    "tsBuildInfoFile": "dist/tsconfig.app.tsbuildinfo",
    "jsx": "react-jsx",
    "lib": ["dom"],
    "types": [
      "node",
      "@nx/react/typings/cssmodule.d.ts",
      "@nx/react/typings/image.d.ts",
      "vite/client"
    ],
    "rootDir": "src"
  },
  "exclude": [
    "out-tsc",
    "dist",
    "src/**/*.spec.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.tsx",
    "src/**/*.test.tsx",
    "src/**/*.spec.js",
    "src/**/*.test.js",
    "src/**/*.spec.jsx",
    "src/**/*.test.jsx",
    "eslint.config.js",
    "eslint.config.cjs",
    "eslint.config.mjs"
  ],
  "include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]
}
</file>

<file path="apps/teacher-app/tsconfig.json">
{
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    }
  ],
  "extends": "../../tsconfig.base.json"
}
</file>

<file path="apps/teacher-app/vite.config.ts">
/// <reference types='vitest' />
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig(() => ({
  root: __dirname,
  cacheDir: '../../node_modules/.vite/apps/teacher-app',
  server: {
    port: 4201,
    host: 'localhost',
  },
  preview: {
    port: 4300,
    host: 'localhost',
  },
  plugins: [react()],
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  build: {
    outDir: './dist',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
  },
}));
</file>

<file path="eslint.config.mjs">
import nx from '@nx/eslint-plugin';

export default [
  ...nx.configs['flat/base'],
  ...nx.configs['flat/typescript'],
  ...nx.configs['flat/javascript'],
  {
    ignores: [
      '**/dist',
      '**/vite.config.*.timestamp*',
      '**/vitest.config.*.timestamp*',
    ],
  },
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],
    rules: {
      '@nx/enforce-module-boundaries': [
        'error',
        {
          enforceBuildableLibDependency: true,
          allow: ['^.*/eslint(\\.base)?\\.config\\.[cm]?js$'],
          depConstraints: [
            {
              sourceTag: '*',
              onlyDependOnLibsWithTags: ['*'],
            },
          ],
        },
      ],
    },
  },
  {
    files: [
      '**/*.ts',
      '**/*.tsx',
      '**/*.cts',
      '**/*.mts',
      '**/*.js',
      '**/*.jsx',
      '**/*.cjs',
      '**/*.mjs',
    ],
    // Override or add rules here
    rules: {},
  },
];
</file>

<file path="README.md">
# 

<a alt="Nx logo" href="https://nx.dev" target="_blank" rel="noreferrer"><img src="https://raw.githubusercontent.com/nrwl/nx/master/images/nx-logo.png" width="45"></a>

✨ Your new, shiny [Nx workspace](https://nx.dev) is almost ready ✨.

[Learn more about this workspace setup and its capabilities](https://nx.dev/tutorials/2-react-monorepo/1r-introduction/1-welcome?utm_source=nx_project&amp;utm_medium=readme&amp;utm_campaign=nx_projects) or run `npx nx graph` to visually explore what was created. Now, let's get you up to speed!

## Finish your CI setup

[Click here to finish setting up your workspace!](https://cloud.nx.app/connect/tMMKMyeRff)


## Run tasks

To run the dev server for your app, use:

```sh
npx nx serve student-app
```

To create a production bundle:

```sh
npx nx build student-app
```

To see all available targets to run for a project, run:

```sh
npx nx show project student-app
```

These targets are either [inferred automatically](https://nx.dev/concepts/inferred-tasks?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) or defined in the `project.json` or `package.json` files.

[More about running tasks in the docs &raquo;](https://nx.dev/features/run-tasks?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Add new projects

While you could add new projects to your workspace manually, you might want to leverage [Nx plugins](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) and their [code generation](https://nx.dev/features/generate-code?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) feature.

Use the plugin's generator to create new projects.

To generate a new application, use:

```sh
npx nx g @nx/react:app demo
```

To generate a new library, use:

```sh
npx nx g @nx/react:lib mylib
```

You can use `npx nx list` to get a list of installed plugins. Then, run `npx nx list <plugin-name>` to learn about more specific capabilities of a particular plugin. Alternatively, [install Nx Console](https://nx.dev/getting-started/editor-setup?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) to browse plugins and generators in your IDE.

[Learn more about Nx plugins &raquo;](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) | [Browse the plugin registry &raquo;](https://nx.dev/plugin-registry?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)


[Learn more about Nx on CI](https://nx.dev/ci/intro/ci-with-nx#ready-get-started-with-your-provider?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Install Nx Console

Nx Console is an editor extension that enriches your developer experience. It lets you run tasks, generate code, and improves code autocompletion in your IDE. It is available for VSCode and IntelliJ.

[Install Nx Console &raquo;](https://nx.dev/getting-started/editor-setup?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Useful links

Learn more:

- [Learn more about this workspace setup](https://nx.dev/tutorials/2-react-monorepo/1r-introduction/1-welcome?utm_source=nx_project&amp;utm_medium=readme&amp;utm_campaign=nx_projects)
- [Learn about Nx on CI](https://nx.dev/ci/intro/ci-with-nx?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [Releasing Packages with Nx release](https://nx.dev/features/manage-releases?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [What are Nx plugins?](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

And join the Nx community:
- [Discord](https://go.nx.dev/community)
- [Follow us on X](https://twitter.com/nxdevtools) or [LinkedIn](https://www.linkedin.com/company/nrwl)
- [Our Youtube channel](https://www.youtube.com/@nxdevtools)
- [Our blog](https://nx.dev/blog?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
</file>

<file path="repomix-output.txt">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.editorconfig
.github/instructions/nx.instructions.md
.github/workflows/ci.yml
.gitignore
.npmrc
.prettierignore
.prettierrc
apps/student-app/eslint.config.mjs
apps/student-app/index.html
apps/student-app/package.json
apps/student-app/postcss.config.js
apps/student-app/src/app/app.tsx
apps/student-app/src/app/components/common/GlobalContex.tsx
apps/student-app/src/app/components/common/translate/header.translate.tsx
apps/student-app/src/app/components/common/translate/home.translate.tsx
apps/student-app/src/app/components/common/translate/translate.tsx
apps/student-app/src/app/components/layout/Footer.tsx
apps/student-app/src/app/components/layout/Header.tsx
apps/student-app/src/app/components/ui/Course.tsx
apps/student-app/src/app/components/ui/Slider.tsx
apps/student-app/src/app/pages/home/Home.tsx
apps/student-app/src/app/pages/home/SectionCourse.tsx
apps/student-app/src/app/pages/login/Login.tsx
apps/student-app/src/app/types/CourseType.tsx
apps/student-app/src/app/types/LanguageType.tsx
apps/student-app/src/main.tsx
apps/student-app/src/styles.css
apps/student-app/tailwind.config.js
apps/student-app/tsconfig.app.json
apps/student-app/tsconfig.json
apps/student-app/vite.config.ts
eslint.config.mjs
nx.json
package.json
pnpm-workspace.yaml
README.md
tsconfig.base.json
tsconfig.json

================================================================
Files
================================================================

================
File: .editorconfig
================
# Editor configuration, see http://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
max_line_length = off
trim_trailing_whitespace = false

================
File: .github/instructions/nx.instructions.md
================
---
applyTo: '**'
---

// This file is automatically generated by Nx Console

You are in an nx workspace using Nx 21.0.3 and pnpm as the package manager.

You have access to the Nx MCP server and the tools it provides. Use them. Follow these guidelines in order to best help the user:

# General Guidelines
- When answering questions, use the nx_workspace tool first to gain an understanding of the workspace architecture
- For questions around nx configuration, best practices or if you're unsure, use the nx_docs tool to get relevant, up-to-date docs!! Always use this instead of assuming things about nx configuration
- If the user needs help with an Nx configuration or project graph error, use the 'nx_workspace' tool to get any errors
- To help answer questions about the workspace structure or simply help with demonstrating how tasks depend on each other, use the 'nx_visualize_graph' tool

# Generation Guidelines
If the user wants to generate something, use the following flow:

- learn about the nx workspace and any specifics the user needs by using the 'nx_workspace' tool and the 'nx_project_details' tool if applicable
- get the available generators using the 'nx_generators' tool
- decide which generator to use. If no generators seem relevant, check the 'nx_available_plugins' tool to see if the user could install a plugin to help them
- get generator details using the 'nx_generator_schema' tool
- you may use the 'nx_docs' tool to learn more about a specific generator or technology if you're unsure
- decide which options to provide in order to best complete the user's request. Don't make any assumptions and keep the options minimalistic
- open the generator UI using the 'nx_open_generate_ui' tool
- wait for the user to finish the generator
- read the generator log file using the 'nx_read_generator_log' tool
- use the information provided in the log file to answer the user's question or continue with what they were doing
undefined

# CI Error Guidelines
If the user wants help with fixing an error in their CI pipeline, use the following flow:
- Retrieve the list of current CI Pipeline Executions (CIPEs) using the 'nx_cloud_cipe_details' tool
- If there are any errors, use the 'nx_cloud_fix_cipe_failure' tool to retrieve the logs for a specific task
- Use the task logs to see what's wrong and help the user fix their problem. Use the appropriate tools if necessary
- Make sure that the problem is fixed by running the task that you passed into the 'nx_cloud_fix_cipe_failure' tool

================
File: .github/workflows/ci.yml
================
name: CI

on:
  push:
    branches:
      - master
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9.8.0
          run_install: false

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: pnpm dlx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # - run: pnpm exec nx-cloud record -- echo Hello World
      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      - run: pnpm exec nx affected -t lint test build

================
File: .gitignore
================
# See https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# compiled output
dist
tmp
out-tsc

# dependencies
node_modules

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# misc
/.sass-cache
/connect.lock
/coverage
/libpeerconnection.log
npm-debug.log
yarn-error.log
testem.log
/typings

# System Files
.DS_Store
Thumbs.db

.nx/cache
.nx/workspace-data

vite.config.*.timestamp*
vitest.config.*.timestamp*
.cursor\rules\nx-rules.mdc
.github\instructions\nx.instructions.md

================
File: .npmrc
================
strict-peer-dependencies=false
auto-install-peers=true

================
File: .prettierignore
================
# Add files here to ignore them from prettier formatting
/dist
/coverage
/.nx/cache
/.nx/workspace-data

================
File: .prettierrc
================
{
  "singleQuote": true
}

================
File: apps/student-app/eslint.config.mjs
================
import nx from '@nx/eslint-plugin';
import baseConfig from '../../eslint.config.mjs';

export default [
  ...baseConfig,
  ...nx.configs['flat/react'],
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],
    // Override or add rules here
    rules: {},
  },
];

================
File: apps/student-app/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Hệ Thống Dạy Học Trực Tuyến</title>
    <base href="/" />

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="stylesheet" href="/src/styles.css" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: apps/student-app/package.json
================
{
  "name": "@./student-app",
  "version": "0.0.1",
  "private": true,
  "nx": {
    "name": "student-app"
  }
}

================
File: apps/student-app/postcss.config.js
================
const { join } = require('path');

// Note: If you use library-specific PostCSS/Tailwind configuration then you should remove the `postcssConfig` build
// option from your application's configuration (i.e. project.json).
//
// See: https://nx.dev/guides/using-tailwind-css-in-react#step-4:-applying-configuration-to-libraries

module.exports = {
  plugins: {
    tailwindcss: {
      config: join(__dirname, 'tailwind.config.js'),
    },
    autoprefixer: {},
  },
};

================
File: apps/student-app/src/app/app.tsx
================
import { Route, Routes } from 'react-router-dom';
import Home from './pages/home/Home';
import Header from './components/layout/Header';
import Login from './pages/login/Login';

export function App() {
  return (
    <div>
      <Header />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/login" element={<Login />} />
      </Routes>
    </div>
  );
}

export default App;

================
File: apps/student-app/src/app/components/common/GlobalContex.tsx
================
import { createContext, useContext, useEffect, useState } from 'react';
import { LanguageType } from '../../types/LanguageType';

export interface GlobalType {
  language: LanguageType;
  setLanguage: (language: LanguageType) => void;
}

export const GlobalContext = createContext<GlobalType | undefined>(undefined);
export const GlobalContextProvider = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  const [language, setLanguage] = useState<LanguageType>('vi');

  useEffect(() => {
    const storedLanguage = localStorage.getItem('language') as LanguageType;
    if (storedLanguage) {
      setLanguage(storedLanguage);
    }
  }, []);

  return (
    <GlobalContext.Provider
      value={{
        language,
        setLanguage,
      }}
    >
      {children}
    </GlobalContext.Provider>
  );
};

export const useGlobalContext = () => {
  const context = useContext(GlobalContext);
  if (!context) {
    throw new Error('not exist context');
  }

  const changeLanguage = (language: LanguageType) => {
    localStorage.setItem('language', language);
    context.setLanguage(language);
  };

  return { ...context, changeLanguage };
};

================
File: apps/student-app/src/app/components/common/translate/header.translate.tsx
================
export default {
  HOME_PAGE: {
    vi: 'Trang chủ',
    en: 'Home',
  },
  COURSES: {
    vi: 'Khóa học',
    en: 'Courses',
  },
  LIBRARY: {
    vi: 'Thư viện',
    en: 'Library',
  },
  FORUM: {
    vi: 'Diễn đàn',
    en: 'Forum',
  },
  SEARCH: {
    vi: 'Tìm kiếm khoá học',
    en: 'Search course',
  },
  LOGIN: {
    vi: 'Đăng nhập',
    en: 'Login',
  },
  SIGN_UP: {
    vi: 'Đăng ký',
    en: 'Sign up',
  },
  LOGOUT: {
    vi: 'Đăng xuất',
    en: 'Logout',
  },
  PROFILE: {
    vi: 'Hồ sơ',
    en: 'Profile',
  },
  SETTINGS: {
    vi: 'Cài đặt',
    en: 'Settings',
  },
};

================
File: apps/student-app/src/app/components/common/translate/home.translate.tsx
================
export default {
  NEW_COURSE: {
    vi: 'Khóa học mới nhất',
    en: 'Latest course',
  },
  FREE_COURSE: {
    vi: 'Khóa học miễn phí',
    en: 'Free course',
  },
  PAID_COURSE: {
    vi: 'Khóa học trả phí',
    en: 'Paid course',
  },
};

================
File: apps/student-app/src/app/components/common/translate/translate.tsx
================
import * as header from './header.translate';
import * as home from './home.translate';

const Translations: Record<string, Record<string, string>> = {
  ...header.default,
  ...home.default,
};

export const translate = (key: string) => {
  const language = localStorage.getItem('language') || 'vi';

  return Translations[key]?.[language] || key;
};

================
File: apps/student-app/src/app/components/layout/Footer.tsx
================
const Footer = () => {
  return (
    <footer className="bg-white text-gray-600 p-4 text-center">
      <div className="flex justify-center space-x-8 mb-4">
        <div>
          <h3 className="font-bold">Ứng dụng</h3>
          <p className="text-gray-500">Nền tảng học tập trực tuyến</p>
        </div>
        <div>
          <h3 className="font-bold">Liên kết nhân</h3>
          <p>Về chúng tôi</p>
          <p>Blog</p>
        </div>
        <div>
          <h3 className="font-bold">Hỗ trợ</h3>
          <p>FAQ</p>
          <p>Liên hệ</p>
        </div>
        <div>
          <h3 className="font-bold">MXH</h3>
          <div className="flex space-x-2">
            <a
              href="https://facebook.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M22.675 0H1.325C.593 0 0 .593 0 1.325v21.351C0 23.407.593 24 1.325 24H12.82v-9.294H9.692v-3.622h3.128V8.413c0-3.1 1.893-4.788 4.659-4.788 1.325 0 2.463.099 2.795.143v3.24l-1.918.001c-1.504 0-1.795.715-1.795 1.763v2.313h3.587l-.467 3.622h-3.12V24h6.116c.732 0 1.325-.593 1.325-1.324V1.325C24 .593 23.407 0 22.675 0z" />
              </svg>
            </a>
            <a
              href="https://youtube.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 9.71 0 12 0 12s0 2.29.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 14.29 24 12 24 12s0-2.29-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />
              </svg>
            </a>
          </div>
        </div>
      </div>
      <p className="text-sm">© 2024 Ứng dụng</p>
    </footer>
  );
};

export default Footer;

================
File: apps/student-app/src/app/components/layout/Header.tsx
================
import { Link } from 'react-router-dom';
import { useGlobalContext } from '../common/GlobalContex';
import { LanguageFlag, LanguageList } from '../../types/LanguageType';
import { translate } from '../common/translate/translate';

const Header = () => {
  const { language, changeLanguage } = useGlobalContext();

  return (
    <header className="bg-blue-900 text-white p-2 flex items-center justify-between sticky top-0 z-50 text-lg px-8">
      <div className="flex items-center space-x-4">
        <Link to="/" className="flex items-center">
          <img src="./logo.png" alt="logo" width={'60px'} />
        </Link>
        <nav className="space-x-4 hidden md:flex">
          <Link to="/" className="hover:underline">
            {translate('HOME_PAGE')}
          </Link>
          <Link to="/courses" className="hover:underline">
            {translate('COURSES')}
          </Link>
          <Link to="/library" className="hover:underline">
            {translate('LIBRARY')}
          </Link>
          <Link to="/forum" className="hover:underline">
            {translate('FORUM')}
          </Link>
        </nav>
      </div>
      <div className="flex items-center space-x-2 text-black">
        <div className="relative">
          <label className="input input-bordered flex items-center gap-2">
            <input
              type="text"
              className="grow"
              placeholder={translate('SEARCH')}
            />
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 16 16"
              fill="currentColor"
              className="h-4 w-4 opacity-70"
            >
              <path
                fillRule="evenodd"
                d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z"
                clipRule="evenodd"
              />
            </svg>
          </label>
        </div>
        {/* <Link to="/profile" className="bg-gray-300 p-2 rounded-full">
          <svg
            className="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
        </Link> */}
        <div>
          <Link to="/login" className="btn btn-primary text-lg">
            {translate('LOGIN')}
          </Link>
        </div>
        <div className="dropdown dropdown-end">
          <div tabIndex={0} role="button" className="btn btn-ghost">
            <img src={LanguageFlag[language]} width={'48px'} alt="icon" />
          </div>
          <ul
            tabIndex={0}
            className="dropdown-content menu bg-base-100 rounded-box z-[1] w-24 p-2 shadow"
          >
            {LanguageList.map((item) => (
              <li
                key={item.code}
                onClick={() => {
                  changeLanguage(item.code);
                }}
              >
                <div>
                  <img src={item.flag} width={'24px'} alt="icon" />
                  {item.code}
                </div>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </header>
  );
};

export default Header;

================
File: apps/student-app/src/app/components/ui/Course.tsx
================
import { Link } from 'react-router-dom';
import { CourseType } from '../../types/CourseType';

interface CourseProps {
  course: CourseType;
}

const Course = ({ course }: CourseProps) => {
  return (
    <div key={course.id} className="card bg-base-100 shadow-xl">
      <figure>
        <img
          src={course.image}
          alt={course.title}
          className="h-48 w-full object-cover"
        />
      </figure>
      <div className="card-body">
        <h2 className="card-title">{course.title}</h2>
        {course.type === 'paid' ? (
          <p>{course.price.toLocaleString('vi-VN')} VNĐ</p>
        ) : (
          <p>Miễn phí</p>
        )}
        <div className="card-actions justify-end">
          <Link to={`/course/${course.id}`} className="btn btn-primary">
            Xem chi tiết
          </Link>
        </div>
      </div>
    </div>
  );
};

export default Course;

================
File: apps/student-app/src/app/components/ui/Slider.tsx
================
import { Link } from 'react-router-dom';

const Slider = () => {
  return (
    <div className="carousel w-full">
      <div id="slide1" className="carousel-item relative w-full">
        <img
          src="https://placehold.co/1200x400?text=Hero+Image+1"
          className="w-full"
          alt="slide 1"
        />
        <div className="hero-overlay bg-opacity-60 absolute inset-0"></div>
        <div className="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
          <a href="#slide4" className="btn btn-circle">
            ❮
          </a>
          <a href="#slide2" className="btn btn-circle">
            ❯
          </a>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white">
          <div className="max-w-md">
            <h1 className="mb-5 text-5xl font-bold">Học mọi lúc, mọi nơi</h1>
            <p className="mb-5">
              Tham gia các khóa học trực tuyến chất lượng cao để nâng cao kỹ
              năng của bạn!
            </p>
            <Link to="/courses" className="btn btn-primary">
              Khám phá ngay
            </Link>
          </div>
        </div>
      </div>
      <div id="slide2" className="carousel-item relative w-full">
        <img
          src="https://placehold.co/1200x400?text=Hero+Image+2"
          className="w-full"
          alt="slide 2"
        />
        <div className="hero-overlay bg-opacity-60 absolute inset-0"></div>
        <div className="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
          <a href="#slide1" className="btn btn-circle">
            ❮
          </a>
          <a href="#slide3" className="btn btn-circle">
            ❯
          </a>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white">
          <div className="max-w-md">
            <h1 className="mb-5 text-5xl font-bold">Khóa học đa dạng</h1>
            <p className="mb-5">
              Khám phá hàng trăm khóa học từ cơ bản đến nâng cao!
            </p>
            <Link to="/courses" className="btn btn-primary">
              Khám phá ngay
            </Link>
          </div>
        </div>
      </div>
      <div id="slide3" className="carousel-item relative w-full">
        <img
          src="https://placehold.co/1200x400?text=Hero+Image+3"
          className="w-full"
          alt="slide 3"
        />
        <div className="hero-overlay bg-opacity-60 absolute inset-0"></div>
        <div className="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
          <a href="#slide2" className="btn btn-circle">
            ❮
          </a>
          <a href="#slide4" className="btn btn-circle">
            ❯
          </a>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white">
          <div className="max-w-md">
            <h1 className="mb-5 text-5xl font-bold">Học mọi lúc, mọi nơi</h1>
            <p className="mb-5">
              Tham gia các khóa học trực tuyến chất lượng cao để nâng cao kỹ
              năng của bạn!
            </p>
            <Link to="/courses" className="btn btn-primary">
              Khám phá ngay
            </Link>
          </div>
        </div>
      </div>
      <div id="slide4" className="carousel-item relative w-full">
        <img
          src="https://placehold.co/1200x400?text=Hero+Image+4"
          className="w-full"
          alt="slide 4"
        />
        <div className="hero-overlay bg-opacity-60 absolute inset-0"></div>
        <div className="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
          <a href="#slide3" className="btn btn-circle">
            ❮
          </a>
          <a href="#slide1" className="btn btn-circle">
            ❯
          </a>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white">
          <div className="max-w-md">
            <h1 className="mb-5 text-5xl font-bold">Học cùng cộng đồng</h1>
            <p className="mb-5">
              Kết nối với hàng ngàn học viên trên toàn thế giới!
            </p>
            <Link to="/courses" className="btn btn-primary">
              Khám phá ngay
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Slider;

================
File: apps/student-app/src/app/pages/home/Home.tsx
================
import { CourseType } from '../../types/CourseType';
import Slider from '../../components/ui/Slider';
import SectionCourse from './SectionCourse';
import Footer from '../../components/layout/Footer';
import { useGlobalContext } from '../../components/common/GlobalContex';
import { translate } from '../../components/common/translate/translate';

const courses: CourseType[] = [
  {
    id: 1,
    title: 'Lập trình JavaScript Cơ bản',
    type: 'free',
    image: 'https://placehold.co/300x200',
    price: 0,
    isNew: true,
  },
  {
    id: 2,
    title: 'React Nâng cao',
    type: 'paid',
    image: 'https://placehold.co/300x200',
    price: 499000,
    isNew: false,
  },
  {
    id: 3,
    title: 'HTML & CSS cho người mới',
    type: 'free',
    image: 'https://placehold.co/300x200',
    price: 0,
    isNew: true,
  },
  {
    id: 4,
    title: 'Node.js Chuyên sâu',
    type: 'paid',
    image: 'https://placehold.co/300x200',
    price: 799000,
    isNew: true,
  },
];

const Home = () => {
  const { language } = useGlobalContext();
  return (
    <div className="min-h-screen bg-gray-100">
      {/* Slider */}
      <Slider />

      {/* Free Courses */}
      <SectionCourse title={translate('NEW_COURSE')} courses={courses} />

      {/* Paid Courses */}
      <SectionCourse title={translate('FREE_COURSE')} courses={courses} />

      {/* Latest Courses */}
      <SectionCourse title={translate('PAID_COURSE')} courses={courses} />

      {/* Footer */}
      <Footer />
    </div>
  );
};

export default Home;

================
File: apps/student-app/src/app/pages/home/SectionCourse.tsx
================
import Course from '../../components/ui/Course';
import { CourseType } from '../../types/CourseType';

interface SectionCourseProps {
  title: string;
  courses: CourseType[];
}

const SectionCourse = ({ courses, title }: SectionCourseProps) => {
  return (
    <section className="py-12 px-4 bg-base-300">
      <h2 className="text-3xl font-bold text-center mb-8">{title}</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {courses.map((course) => (
          <Course key={course.id} course={course} />
        ))}
      </div>
    </section>
  );
};

export default SectionCourse;

================
File: apps/student-app/src/app/pages/login/Login.tsx
================
import { BookOpen, FacebookLogo, GoogleLogo } from 'phosphor-react';
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleLogin = () => {
    // Giả lập đăng nhập thành công
    if (username && password) {
      navigate('/'); // Điều hướng về trang chủ sau khi đăng nhập
    }
  };

  return (
    <div
      className="min-h-screen flex items-center justify-center bg-cover bg-center"
      style={{
        backgroundImage:
          'url(https://placehold.co/1200x800?text=Background+Image)',
      }}
    >
      <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md">
        {/* Logo */}
        <div className="flex justify-center mb-6">
          <h1 className="text-3xl font-bold text-blue-600 flex items-center">
            <BookOpen size={32} /> E-Learning
          </h1>
        </div>

        {/* Form */}
        <div className="space-y-4">
          <div className="form-control">
            <input
              type="text"
              placeholder="Email..."
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="input input-bordered w-full"
            />
          </div>
          <div className="form-control">
            <input
              type="password"
              placeholder="Mật khẩu..."
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="input input-bordered w-full"
            />
          </div>
          <button onClick={handleLogin} className="btn btn-primary w-full">
            Đăng nhập
          </button>
        </div>

        {/* Divider */}
        <div className="divider my-6">HOẶC</div>

        {/* Social Login Buttons */}
        <div className="space-y-3">
          <button className="btn btn-outline w-full flex items-center justify-center">
            <GoogleLogo size={24} weight="bold" />
            Đăng nhập qua Google
          </button>
          <button className="btn btn-outline w-full flex items-center justify-center">
            <FacebookLogo size={24} weight="bold" />
            Đăng nhập qua Facebook
          </button>
        </div>

        {/* Register Link */}
        <div className="text-center mt-4">
          <p>
            Bạn chưa có tài khoản?{' '}
            <Link to="/register" className="text-blue-600 hover:underline">
              Đăng ký ngay
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;

================
File: apps/student-app/src/app/types/CourseType.tsx
================
export type CourseType = {
  id: number;
  title: string;
  image: string;
  type: 'free' | 'paid';
  price: number;
  isNew: boolean;
};

================
File: apps/student-app/src/app/types/LanguageType.tsx
================
export const LanguageCode = {
  vi: 'vi',
  en: 'en',
};
export type LanguageType = keyof typeof LanguageCode;
export const LanguageFlag = {
  [LanguageCode.vi]: './icons/vi-icon.png',
  [LanguageCode.en]: './icons/en-icon.png',
};

export const LanguageList = [
  {
    code: LanguageCode.vi as LanguageType,
    flag: LanguageFlag[LanguageCode.vi],
  },
  {
    code: LanguageCode.en as LanguageType,
    flag: LanguageFlag[LanguageCode.en],
  },
];

================
File: apps/student-app/src/main.tsx
================
import { StrictMode } from 'react';
import { BrowserRouter } from 'react-router-dom';
import * as ReactDOM from 'react-dom/client';
import App from './app/app';
import './styles.css';
import { GlobalContextProvider } from './app/components/common/GlobalContex';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <GlobalContextProvider>
    <StrictMode>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </StrictMode>
  </GlobalContextProvider>
);

================
File: apps/student-app/src/styles.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
/* You can add global styles to this file, and also import other style files */

================
File: apps/student-app/tailwind.config.js
================
const { createGlobPatternsForDependencies } = require('@nx/react/tailwind');
const { join } = require('path');

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    join(
      __dirname,
      '{src,pages,components,app}/**/*!(*.stories|*.spec).{ts,tsx,html}'
    ),
    ...createGlobPatternsForDependencies(__dirname),
  ],
  theme: {
    extend: {},
  },
  plugins: [require('daisyui')],
};

================
File: apps/student-app/tsconfig.app.json
================
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "dist",
    "tsBuildInfoFile": "dist/tsconfig.app.tsbuildinfo",
    "jsx": "react-jsx",
    "lib": ["dom"],
    "types": [
      "node",
      "@nx/react/typings/cssmodule.d.ts",
      "@nx/react/typings/image.d.ts",
      "vite/client"
    ],
    "rootDir": "src"
  },
  "exclude": [
    "out-tsc",
    "dist",
    "src/**/*.spec.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.tsx",
    "src/**/*.test.tsx",
    "src/**/*.spec.js",
    "src/**/*.test.js",
    "src/**/*.spec.jsx",
    "src/**/*.test.jsx",
    "eslint.config.js",
    "eslint.config.cjs",
    "eslint.config.mjs"
  ],
  "include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]
}

================
File: apps/student-app/tsconfig.json
================
{
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    }
  ],
  "extends": "../../tsconfig.base.json"
}

================
File: apps/student-app/vite.config.ts
================
/// <reference types='vitest' />
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
// import tailwindcss from '@tailwindcss/vite';

export default defineConfig(() => ({
  root: __dirname,
  cacheDir: '../../node_modules/.vite/apps/student-app',
  server: {
    port: 4200,
    host: 'localhost',
  },
  preview: {
    port: 4300,
    host: 'localhost',
  },
  plugins: [react()],
  
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  build: {
    outDir: './dist',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
  },
}));

================
File: eslint.config.mjs
================
import nx from '@nx/eslint-plugin';

export default [
  ...nx.configs['flat/base'],
  ...nx.configs['flat/typescript'],
  ...nx.configs['flat/javascript'],
  {
    ignores: [
      '**/dist',
      '**/vite.config.*.timestamp*',
      '**/vitest.config.*.timestamp*',
    ],
  },
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],
    rules: {
      '@nx/enforce-module-boundaries': [
        'error',
        {
          enforceBuildableLibDependency: true,
          allow: ['^.*/eslint(\\.base)?\\.config\\.[cm]?js$'],
          depConstraints: [
            {
              sourceTag: '*',
              onlyDependOnLibsWithTags: ['*'],
            },
          ],
        },
      ],
    },
  },
  {
    files: [
      '**/*.ts',
      '**/*.tsx',
      '**/*.cts',
      '**/*.mts',
      '**/*.js',
      '**/*.jsx',
      '**/*.cjs',
      '**/*.mjs',
    ],
    // Override or add rules here
    rules: {},
  },
];

================
File: nx.json
================
{
  "$schema": "./node_modules/nx/schemas/nx-schema.json",
  "defaultBase": "master",
  "namedInputs": {
    "default": ["{projectRoot}/**/*", "sharedGlobals"],
    "production": [
      "default",
      "!{projectRoot}/.eslintrc.json",
      "!{projectRoot}/eslint.config.mjs",
      "!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)",
      "!{projectRoot}/tsconfig.spec.json",
      "!{projectRoot}/src/test-setup.[jt]s"
    ],
    "sharedGlobals": ["{workspaceRoot}/.github/workflows/ci.yml"]
  },
  "nxCloudId": "682c3f85ea6e6035f0a92a28",
  "plugins": [
    {
      "plugin": "@nx/js/typescript",
      "options": {
        "typecheck": {
          "targetName": "typecheck"
        },
        "build": {
          "targetName": "build",
          "configName": "tsconfig.lib.json",
          "buildDepsName": "build-deps",
          "watchDepsName": "watch-deps"
        }
      }
    },
    {
      "plugin": "@nx/react/router-plugin",
      "options": {
        "buildTargetName": "build",
        "devTargetName": "dev",
        "startTargetName": "start",
        "watchDepsTargetName": "watch-deps",
        "buildDepsTargetName": "build-deps",
        "typecheckTargetName": "typecheck"
      }
    },
    {
      "plugin": "@nx/eslint/plugin",
      "options": {
        "targetName": "lint"
      }
    },
    {
      "plugin": "@nx/vite/plugin",
      "options": {
        "buildTargetName": "build",
        "testTargetName": "test",
        "serveTargetName": "serve",
        "devTargetName": "dev",
        "previewTargetName": "preview",
        "serveStaticTargetName": "serve-static",
        "typecheckTargetName": "typecheck",
        "buildDepsTargetName": "build-deps",
        "watchDepsTargetName": "watch-deps"
      }
    }
  ],
  "generators": {
    "@nx/react": {
      "application": {
        "babel": true,
        "style": "tailwind",
        "linter": "eslint",
        "bundler": "vite"
      },
      "component": {
        "style": "tailwind"
      },
      "library": {
        "style": "tailwind",
        "linter": "eslint"
      }
    }
  }
}

================
File: package.json
================
{
  "name": "E-Learning-System",
  "version": "0.0.0",
  "engines": {
    "node": "22.14.0"
  },
  "scripts": {
    "start:student-app": "pnpm exec nx serve student-app"
  },
  "private": true,
  "dependencies": {
    "@tailwindcss/vite": "^4.0.15",
    "phosphor-react": "^1.4.1",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-router-dom": "6.29.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.8.0",
    "@nx/eslint": "21.0.3",
    "@nx/eslint-plugin": "21.0.3",
    "@nx/js": "21.0.3",
    "@nx/react": "21.0.3",
    "@nx/vite": "21.0.3",
    "@nx/web": "21.0.3",
    "@nx/workspace": "21.0.3",
    "@swc-node/register": "~1.9.1",
    "@swc/cli": "~0.6.0",
    "@swc/core": "~1.5.7",
    "@swc/helpers": "~0.5.11",
    "@types/node": "^20.0.0",
    "@types/react": "19.0.0",
    "@types/react-dom": "19.0.0",
    "@vitejs/plugin-react": "^4.2.0",
    "@vitest/ui": "^3.0.0",
    "autoprefixer": "10.4.13",
    "daisyui": "^4.12.24",
    "eslint": "^9.8.0",
    "eslint-config-prettier": "^10.0.0",
    "eslint-plugin-import": "2.31.0",
    "eslint-plugin-jsx-a11y": "6.10.1",
    "eslint-plugin-react": "7.35.0",
    "eslint-plugin-react-hooks": "5.0.0",
    "jiti": "2.4.2",
    "jsdom": "~22.1.0",
    "nx": "21.0.3",
    "postcss": "8.4.38",
    "prettier": "^2.6.2",
    "tailwindcss": "3.4.3",
    "tslib": "^2.3.0",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.19.0",
    "vite": "^6.0.0",
    "vitest": "^3.0.0"
  }
}

================
File: pnpm-workspace.yaml
================
packages: 
  - "apps/*"

================
File: README.md
================
# 

<a alt="Nx logo" href="https://nx.dev" target="_blank" rel="noreferrer"><img src="https://raw.githubusercontent.com/nrwl/nx/master/images/nx-logo.png" width="45"></a>

✨ Your new, shiny [Nx workspace](https://nx.dev) is almost ready ✨.

[Learn more about this workspace setup and its capabilities](https://nx.dev/tutorials/2-react-monorepo/1r-introduction/1-welcome?utm_source=nx_project&amp;utm_medium=readme&amp;utm_campaign=nx_projects) or run `npx nx graph` to visually explore what was created. Now, let's get you up to speed!

## Finish your CI setup

[Click here to finish setting up your workspace!](https://cloud.nx.app/connect/tMMKMyeRff)


## Run tasks

To run the dev server for your app, use:

```sh
npx nx serve student-app
```

To create a production bundle:

```sh
npx nx build student-app
```

To see all available targets to run for a project, run:

```sh
npx nx show project student-app
```

These targets are either [inferred automatically](https://nx.dev/concepts/inferred-tasks?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) or defined in the `project.json` or `package.json` files.

[More about running tasks in the docs &raquo;](https://nx.dev/features/run-tasks?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Add new projects

While you could add new projects to your workspace manually, you might want to leverage [Nx plugins](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) and their [code generation](https://nx.dev/features/generate-code?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) feature.

Use the plugin's generator to create new projects.

To generate a new application, use:

```sh
npx nx g @nx/react:app demo
```

To generate a new library, use:

```sh
npx nx g @nx/react:lib mylib
```

You can use `npx nx list` to get a list of installed plugins. Then, run `npx nx list <plugin-name>` to learn about more specific capabilities of a particular plugin. Alternatively, [install Nx Console](https://nx.dev/getting-started/editor-setup?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) to browse plugins and generators in your IDE.

[Learn more about Nx plugins &raquo;](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) | [Browse the plugin registry &raquo;](https://nx.dev/plugin-registry?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)


[Learn more about Nx on CI](https://nx.dev/ci/intro/ci-with-nx#ready-get-started-with-your-provider?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Install Nx Console

Nx Console is an editor extension that enriches your developer experience. It lets you run tasks, generate code, and improves code autocompletion in your IDE. It is available for VSCode and IntelliJ.

[Install Nx Console &raquo;](https://nx.dev/getting-started/editor-setup?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Useful links

Learn more:

- [Learn more about this workspace setup](https://nx.dev/tutorials/2-react-monorepo/1r-introduction/1-welcome?utm_source=nx_project&amp;utm_medium=readme&amp;utm_campaign=nx_projects)
- [Learn about Nx on CI](https://nx.dev/ci/intro/ci-with-nx?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [Releasing Packages with Nx release](https://nx.dev/features/manage-releases?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [What are Nx plugins?](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

And join the Nx community:
- [Discord](https://go.nx.dev/community)
- [Follow us on X](https://twitter.com/nxdevtools) or [LinkedIn](https://www.linkedin.com/company/nrwl)
- [Our Youtube channel](https://www.youtube.com/@nxdevtools)
- [Our blog](https://nx.dev/blog?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

================
File: tsconfig.base.json
================
{
  "compilerOptions": {
    "composite": true,
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "importHelpers": true,
    "isolatedModules": true,
    "lib": ["es2022"],
    "module": "esnext",
    "moduleResolution": "bundler",
    "noEmitOnError": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noUnusedLocals": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "es2022",
    "customConditions": ["development"]
  }
}

================
File: tsconfig.json
================
{
  "extends": "./tsconfig.base.json",
  "compileOnSave": false,
  "files": [],
  "references": [
    {
      "path": "./apps/student-app"
    }
  ]
}



================================================================
End of Codebase
================================================================
</file>

<file path="tsconfig.base.json">
{
  "compilerOptions": {
    "composite": true,
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "importHelpers": true,
    "isolatedModules": true,
    "lib": ["es2022"],
    "module": "esnext",
    "moduleResolution": "bundler",
    "noEmitOnError": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noUnusedLocals": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "es2022",
    "customConditions": ["development"]
  }
}
</file>

<file path=".gitignore">
# See https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# compiled output
dist
tmp
out-tsc

# dependencies
node_modules

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# misc
/.sass-cache
/connect.lock
/coverage
/libpeerconnection.log
npm-debug.log
yarn-error.log
testem.log
/typings

# System Files
.DS_Store
Thumbs.db

.nx/cache
.nx/workspace-data

vite.config.*.timestamp*
vitest.config.*.timestamp*
.cursor\rules\nx-rules.mdc
.github\instructions\nx.instructions.md

.cursor\rules\nx-rules.mdc
.github\instructions\nx.instructions.md
</file>

<file path="apps/student-app/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Hệ Thống Dạy Học Trực Tuyến</title>
    <base href="/" />

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="stylesheet" href="/src/styles.css" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="apps/student-app/src/app/app.tsx">
import { Route, Routes } from 'react-router-dom';
import Home from './pages/home/Home';
import Header from './components/layout/Header';
import Login from './pages/login/Login';

export function App() {
  return (
    <div>
      <Header />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/login" element={<Login />} />
      </Routes>
    </div>
  );
}

export default App;
</file>

<file path="apps/student-app/src/main.tsx">
import { StrictMode } from 'react';
import { BrowserRouter } from 'react-router-dom';
import * as ReactDOM from 'react-dom/client';
import App from './app/app';
import './styles.css';
import { GlobalContextProvider } from './app/components/common/GlobalContex';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <GlobalContextProvider>
    <StrictMode>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </StrictMode>
  </GlobalContextProvider>
);
</file>

<file path="apps/student-app/tailwind.config.js">
const { createGlobPatternsForDependencies } = require('@nx/react/tailwind');
const { join } = require('path');

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    join(
      __dirname,
      '{src,pages,components,app}/**/*!(*.stories|*.spec).{ts,tsx,html}'
    ),
    ...createGlobPatternsForDependencies(__dirname),
  ],
  theme: {
    extend: {},
  },
  plugins: [require('daisyui')],
};
</file>

<file path="apps/student-app/vite.config.ts">
/// <reference types='vitest' />
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
// import tailwindcss from '@tailwindcss/vite';

export default defineConfig(() => ({
  root: __dirname,
  cacheDir: '../../node_modules/.vite/apps/student-app',
  server: {
    port: 4200,
    host: 'localhost',
  },
  preview: {
    port: 4300,
    host: 'localhost',
  },
  plugins: [react()],
  
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  build: {
    outDir: './dist',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
  },
}));
</file>

<file path="apps/teacher-app/src/app/components/common/translate/header.translate.tsx">
export default {
  HOME_PAGE: {
    vi: 'Trang chủ',
    en: 'Home',
  },
  COURSES: {
    vi: 'Khóa học',
    en: 'Courses',
  },
  LIBRARY: {
    vi: 'Thư viện',
    en: 'Library',
  },
  FORUM: {
    vi: 'Diễn đàn',
    en: 'Forum',
  },
  SEARCH: {
    vi: 'Tìm kiếm khoá học',
    en: 'Search course',
  },
  LOGIN: {
    vi: 'Đăng nhập',
    en: 'Login',
  },
  SIGN_UP: {
    vi: 'Đăng ký',
    en: 'Sign up',
  },
  LOGOUT: {
    vi: 'Đăng xuất',
    en: 'Logout',
  },
  PROFILE: {
    vi: 'Hồ sơ',
    en: 'Profile',
  },
  SETTINGS: {
    vi: 'Cài đặt',
    en: 'Settings',
  },
  APPLICATION: {
    vi: 'Ứng dụng',
    en: 'Application',
  },
  E_LEARNING: {
    vi: 'Học tập trực tuyến',
    en: 'E-learning',
  },
  ABOUT_US: {
    vi: 'Về chúng tôi',
    en: 'About us',
  },
  BLOG: {
    vi: 'Blog',
    en: 'Blog',
  },
  SUPPORT: {
    vi: 'Hỗ trợ',
    en: 'Support',
  },
  FAQ: {
    vi: 'Câu hỏi thường gặp',
    en: 'FAQ',
  },
  CONTACT: {
    vi: 'Liên hệ',
    en: 'Contact',
  },
  SOCIAL_MEDIA: {
    vi: 'Mạng xã hội',
    en: 'Social media',
  },
  COPYRIGHT_2025: {
    vi: 'Bản quyền © 2025 E-Learning. Đã đăng ký bản quyền.',
    en: 'Copyright © 2025 E-Learning. All rights reserved.',
  },
  LINKS: {
    vi: 'Liên kết',
    en: 'Links',
  },
};
</file>

<file path="apps/teacher-app/src/app/components/common/translate/login.translate.tsx">
export default {
  LOGIN: {
    vi: 'Đăng nhập',
    en: 'Login',
  },
  EMAIL: {
    vi: 'Email...',
    en: 'Email...',
  },
  PASSWORD: {
    vi: 'Mật khẩu...',
    en: 'Password...',
  },
  LOGIN_WITH_GOOGLE: {
    vi: 'Đăng nhập qua Google',
    en: 'Login with Google',
  },
  LOGIN_WITH_FACEBOOK: {
    vi: 'Đăng nhập qua Facebook',
    en: 'Login with Facebook',
  },
  OR: {
    vi: 'HOẶC',
    en: 'OR',
  },
  PHONE: {
    vi: 'Số điện thoại',
    en: 'Phone number',
  },

  REGISTER_LINK_TEXT: {
    vi: 'Bạn chưa có tài khoản? Đăng ký ngay',
    en: "Don't have an account? Sign up now",
  },
  DATE_OF_BIRTH: {
    vi: 'Ngày sinh',
    en: 'Date of birth',
  },
  ENTER_EMAIL: {
    vi: 'Nhập email...',
    en: 'Enter email...',
  },
  ENTER_PASSWORD: {
    vi: 'Nhập mật khẩu...',
    en: 'Enter password...',
  },
  ENTER_USER_NAME: {
    vi: 'Nhập tên người dùng...',
    en: 'Enter user name...',
  },
  ENTER_PHONE: {
    vi: 'Nhập số điện thoại...',
    en: 'Enter phone number...',
  },
  USER_NAME: {
    vi: 'Tên người dùng',
    en: 'User name',
  },
  CANCEL: {
    vi: 'Hủy',
    en: 'Cancel',
  },
};
</file>

<file path="apps/teacher-app/src/app/components/common/translate/translate.tsx">
import * as header from './header.translate';
import * as login from './login.translate';
import * as dashboard from './dashboard.translate';
import * as userManagement from './user-management.translate';

const Translations: Record<string, Record<string, string>> = {
  ...header.default,
  ...login.default,
  ...userManagement.default,
  ...dashboard.default,
};

export const translate = (key: string) => {
  const language = localStorage.getItem('language') || 'vi';

  return Translations[key]?.[language] || key;
};
</file>

<file path="apps/teacher-app/src/app/components/layout/Modal.tsx">
import React from 'react';

interface ModalProps {
  id: string;
  title: string;
  children: React.ReactNode;
}

const Modal = ({ id, title, children }: ModalProps) => {
  return (
    <dialog id={id} className="modal">
      <div className="modal-box w-11/12 max-w-5xl">
        <h3 className="font-bold text-xl">{title}</h3>
        <div className="py-4">{children}</div>
        <div className="modal-action"></div>
      </div>
    </dialog>
  );
};

export default Modal;
</file>

<file path="apps/teacher-app/src/app/components/layout/SideBar.tsx">
import { House, List, Shield, User } from 'phosphor-react';
import { useGlobalContext } from '../common/GlobalContext';
import { Link } from 'react-router-dom';
import { translate } from '../common/translate/translate';

const SideBar = () => {
  const { language } = useGlobalContext();
  return (
    <div className="drawer">
      <input id="my-drawer" type="checkbox" className="drawer-toggle" />
      <div className="drawer-content">
        {/* Page content here */}
        <label htmlFor="my-drawer" className="btn btn-ghost drawer-button">
          <List size={42} className="pointer" />
        </label>
      </div>
      <div className="drawer-side">
        <label
          htmlFor="my-drawer"
          aria-label="close sidebar"
          className="drawer-overlay"
        ></label>
        <ul className="menu bg-base-200 text-base-content min-h-full w-80 p-4 text-lg">
          {/* Sidebar content here */}
          <li>
            <Link to="/">
              <House size={32} /> {translate('HOME')}
            </Link>
          </li>
          <li>
            <Link to="/users">
              <User size={32} /> {translate('USERS')}
            </Link>
          </li>
        </ul>
      </div>
    </div>
  );
};

export default SideBar;
</file>

<file path="apps/teacher-app/src/app/pages/login/Login.tsx">
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Eye, EyeSlash } from 'phosphor-react';
const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const navigate = useNavigate();

  const handleLogin = () => {
    if (username && password) {
      navigate('/');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-xl">
      {/* Logo */}
        <div className="flex flex-col items-center mb-6">
          <img
            src="../../../../public/logo.png"
            alt="E-Learning Logo"
            className="h-28 mb-2"
          />
          <h1 className="text-2xl font-semibold text-gray-700">Đăng nhập</h1>
        </div>

        {/* Form */}
        <div className="space-y-4">
          <input
            type="text"
            placeholder="Email hoặc tên đăng nhập"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            className="input input-bordered w-full rounded-lg border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <div className="relative">
            <input
              type={showPassword ? 'text' : 'password'}
              placeholder="Mật khẩu"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="input input-bordered w-full rounded-lg border border-gray-300 px-4 py-2 pr-10 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <span
              className="absolute inset-y-0 right-3 flex items-center cursor-pointer text-gray-500"
              onClick={() => setShowPassword(!showPassword)}
            >
              {showPassword ? <EyeSlash size={20} /> : <Eye size={20} />}
            </span>
          </div>

          <div className="flex justify-end">
            <Link to="/forgot-password" className="text-sm text-blue-600 hover:underline">
              Quên mật khẩu?
            </Link>
          </div>

          <button
            onClick={handleLogin}
            className="bg-green-500 hover:bg-green-600 text-white w-full py-2 rounded-full font-semibold transition duration-200"
          >
            Đăng nhập
          </button>
        </div>

        {/* Divider */}
        <div className="text-center my-4 text-gray-400">Hoặc đăng nhập bằng</div>

        {/* Social login */}
        <div className="flex flex-col md:flex-row gap-4 justify-center">
          <button className="btn btn-outline w-full md:w-[240px] flex items-center justify-center gap-2">
            <img src="../../../../public/icons/ic_google.png" alt="Google" className="w-8 h-8" />
            <span>Đăng nhập với Google</span>
          </button>
          <button className="btn btn-outline w-full md:w-[240px] flex items-center justify-center gap-2">
            <img src="../../../../public/icons/ic_fb.png" alt="Facebook" className="w-8 h-8" />
            <span>Đăng nhập với Facebook</span>
          </button>
        </div>


        {/* Register */}
        <div className="text-center text-sm text-gray-500 mt-6">
          Chưa có tài khoản?{' '}
          <Link to="/register" className="text-blue-600 hover:underline">
            Đăng ký ngay
          </Link>
        </div>
      </div>
    </div>
  );
};

export default Login;
</file>

<file path="apps/teacher-app/src/app/pages/user-management/AddUserModal.tsx">
import { translate } from '../../components/common/translate/translate';
import Modal from '../../components/layout/Modal';
import Input from '../../components/ui/Input';

const AddUserModal = ({ id }) => {
  return (
    <Modal title={translate('ADD_USER')} id={id}>
      <form method="dialog" className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Email */}
          <Input
            key="email"
            title={'Email'}
            placeholder={translate('ENTER_EMAIL')}
            type="email"
            name="email"
          />
          {/* Tên người dùng */}
          <Input
            key="name"
            title={translate('USER_NAME')}
            placeholder={translate('ENTER_USER_NAME')}
            type="text"
            name="name"
          />
          {/* Mật khẩu */}
          <Input
            key="password"
            title={translate('PASSWORD')}
            placeholder={translate('ENTER_PASSWORD')}
            type="password"
            name="password"
          />
          {/* Ngày sinh */}
          <Input
            key="dob"
            title={translate('DATE_OF_BIRTH')}
            placeholder={translate('DATE_OF_BIRTH')}
            type="date"
            name="dob"
          />
          {/* Số điện thoại */}
          <Input
            key="phone"
            title={translate('PHONE')}
            placeholder={translate('ENTER_PHONE')}
            type="tel"
            name="phone"
          />
          {/* Placeholder để cân bằng lưới (tùy chọn) */}
          <div className="hidden md:block"></div>
        </div>

        {/* Nút hành động */}
        <div className="modal-action">
          <button type="submit" className="btn btn-primary">
            {translate('ADD_USER')}
          </button>
          <button
            type="button"
            className="btn btn-ghost"
            onClick={() => document.getElementById(id)?.close()}
          >
            {translate('CANCEL')}
          </button>
        </div>
      </form>
    </Modal>
  );
};

export default AddUserModal;
</file>

<file path="nx.json">
{
  "$schema": "./node_modules/nx/schemas/nx-schema.json",
  "defaultBase": "master",
  "namedInputs": {
    "default": ["{projectRoot}/**/*", "sharedGlobals"],
    "production": [
      "default",
      "!{projectRoot}/.eslintrc.json",
      "!{projectRoot}/eslint.config.mjs",
      "!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)",
      "!{projectRoot}/tsconfig.spec.json",
      "!{projectRoot}/src/test-setup.[jt]s"
    ],
    "sharedGlobals": ["{workspaceRoot}/.github/workflows/ci.yml"]
  },
  "nxCloudId": "682c3f85ea6e6035f0a92a28",
  "plugins": [
    {
      "plugin": "@nx/js/typescript",
      "options": {
        "typecheck": {
          "targetName": "typecheck"
        },
        "build": {
          "targetName": "build",
          "configName": "tsconfig.lib.json",
          "buildDepsName": "build-deps",
          "watchDepsName": "watch-deps"
        }
      }
    },
    {
      "plugin": "@nx/react/router-plugin",
      "options": {
        "buildTargetName": "build",
        "devTargetName": "dev",
        "startTargetName": "start",
        "watchDepsTargetName": "watch-deps",
        "buildDepsTargetName": "build-deps",
        "typecheckTargetName": "typecheck"
      }
    },
    {
      "plugin": "@nx/eslint/plugin",
      "options": {
        "targetName": "lint"
      }
    },
    {
      "plugin": "@nx/vite/plugin",
      "options": {
        "buildTargetName": "build",
        "testTargetName": "test",
        "serveTargetName": "serve",
        "devTargetName": "dev",
        "previewTargetName": "preview",
        "serveStaticTargetName": "serve-static",
        "typecheckTargetName": "typecheck",
        "buildDepsTargetName": "build-deps",
        "watchDepsTargetName": "watch-deps"
      }
    },
    {
      "plugin": "@nx/rollup/plugin",
      "options": {
        "buildTargetName": "build",
        "buildDepsTargetName": "build-deps",
        "watchDepsTargetName": "watch-deps"
      }
    }
  ],
  "generators": {
    "@nx/react": {
      "application": {
        "babel": true,
        "style": "tailwind",
        "linter": "eslint",
        "bundler": "vite"
      },
      "component": {
        "style": "tailwind"
      },
      "library": {
        "style": "tailwind",
        "linter": "eslint"
      }
    }
  },
  "release": {
    "version": {
      "preVersionCommand": "pnpm dlx nx run-many -t build"
    }
  }
}
</file>

<file path="tsconfig.json">
{
  "extends": "./tsconfig.base.json",
  "compileOnSave": false,
  "files": [],
  "references": [
    {
      "path": "./apps/student-app"
    },
    {
      "path": "./apps/teacher-app"
    }
  ]
}
</file>

<file path="apps/teacher-app/src/app/components/layout/DashBoardLayout.tsx">
import { ReactNode } from 'react';
import Header from './Header';
import Footer from './Footer';

type Props = {
  children: ReactNode;
};

export default function DashBoardLayout({ children }: Props) {
  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <Header />
      <main className="flex-1 px-6 py-8">
        <div className="w-3/4 mx-auto">{children}</div>
      </main>
      <Footer />
    </div>
  );
}
</file>

<file path="apps/teacher-app/src/app/components/layout/Footer.tsx">
import { useGlobalContext } from '../common/GlobalContext';
import { translate } from '../common/translate/translate';

const Footer = () => {
  const {  } = useGlobalContext();
  return (
    <footer className="bg-white text-gray-600 p-4 text-center">
      <div className="flex justify-center space-x-8 mb-4">
        <div>
          <h3 className="font-bold">{translate('APPLICATION')}</h3>
          <p className="text-gray-500">{translate('E_LEARNING')}</p>
        </div>
        <div>
          <h3 className="font-bold">{translate('LINKS')}</h3>
          <p>{translate('ABOUT_US')}</p>
          <p>{translate('BLOG')}</p>
        </div>
        <div>
          <h3 className="font-bold">{translate('SUPPORT')}</h3>
          <p>{translate('FAQ')}</p>
          <p>{translate('CONTACT')}</p>
        </div>
        <div>
          <h3 className="font-bold">{translate('SOCIAL_MEDIA')}</h3>
          <div className="flex space-x-2">
            <a
              href="https://facebook.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M22.675 0H1.325C.593 0 0 .593 0 1.325v21.351C0 23.407.593 24 1.325 24H12.82v-9.294H9.692v-3.622h3.128V8.413c0-3.1 1.893-4.788 4.659-4.788 1.325 0 2.463.099 2.795.143v3.24l-1.918.001c-1.504 0-1.795.715-1.795 1.763v2.313h3.587l-.467 3.622h-3.12V24h6.116c.732 0 1.325-.593 1.325-1.324V1.325C24 .593 23.407 0 22.675 0z" />
              </svg>
            </a>
            <a
              href="https://youtube.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 9.71 0 12 0 12s0 2.29.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 14.29 24 12 24 12s0-2.29-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />
              </svg>
            </a>
          </div>
        </div>
      </div>
      <p className="text-sm">{translate('COPYRIGHT_2025')}</p>
    </footer>
  );
};

export default Footer;
</file>

<file path="apps/teacher-app/src/app/pages/dashboard/DashBoard.tsx">
import { useNavigate } from 'react-router-dom';

const actions = [
  {
    iconSrc: '/icons/icon_book.png',
    title: 'Tạo khóa học',
    description: 'Bắt đầu một khóa học mới.',
    href: '/course/create_course',
    bgColor: 'bg-gradient-to-br from-blue-100 to-blue-200',
  },
  {
    iconSrc: '/icons/icon_edit.png',
    title: 'Quản lý khóa học',
    description: 'Chỉnh sửa nội dung khóa học.',
    href: '/dashboard/my-courses',
    bgColor: 'bg-gradient-to-br from-green-100 to-green-200',
  },
  {
    iconSrc: '/icons/fileText.png',
    title: 'Giao bài tập',
    description: 'Tạo bài tập cho học viên.',
    href: '/dashboard/assignments',
    bgColor: 'bg-gradient-to-br from-yellow-100 to-yellow-200',
  },
  {
    iconSrc: '/icons/clipboardCheck.png',
    title: 'Chấm điểm',
    description: 'Xem bài nộp và chấm điểm.',
    href: '/dashboard/grading',
    bgColor: 'bg-gradient-to-br from-purple-100 to-purple-200',
  },
];

export default function DashBoard() {
  const navigate = useNavigate();

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
      {actions.map((action, index) => (
        <div
          key={index}
          onClick={() => navigate(action.href)}
          className={`cursor-pointer ${action.bgColor} rounded-2xl p-6 h-[240px] w-full flex flex-col justify-between shadow-md hover:shadow-xl transition duration-300 transform hover:-translate-y-1`}
        >
          <div className="flex flex-col items-center">
            <div className="w-20 h-20 rounded-full flex items-center justify-center bg-white shadow mb-4">
              <img src={action.iconSrc} alt={action.title} className="w-14 h-14 object-contain" />
            </div>
            <h2 className="text-4xl font-semibold text-gray-800 text-center">{action.title}</h2>
            <p className="text-base text-gray-600 text-center">{action.description}</p>
          </div>
        </div>
      ))}
    </div>
  );
}
</file>

<file path="pnpm-workspace.yaml">
packages:
  - 'apps/*'
  - 'libs/*'
</file>

<file path="apps/teacher-app/src/app/app.tsx">
import { Route, Routes, Outlet } from 'react-router-dom';
import Login from './pages/login/Login';
import ForgotPassword from './pages/login/ForgotPassword';
import DashBoardLayout from './components/layout/DashBoardLayout';
import DashBoard from './pages/dashboard/DashBoard';
import UserManagement from './pages/user-management/UserManagement';
import CreateCourse from './pages/course/create_course';
// import CourseForm from './pages/course/CourseForm';

export function App() {
  return (
    <Routes>
      <Route path="/login" element={<Login />} />
      <Route path="/forgot-password" element={<ForgotPassword />} />
      <Route element={<DashBoardLayout children={<Outlet />} />}>
        <Route path="/" element={<DashBoard />} />
        <Route path="/users" element={<UserManagement />} />
        <Route path="/course/create_course" element={<CreateCourse />} />
        {/* <Route path="/course/form/:courseId" element={<CourseForm />} /> */}
      </Route>
    </Routes>
  );
}

export default App;
</file>

<file path="package.json">
{
  "name": "E-Learning-System",
  "version": "0.0.0",
  "engines": {
    "node": "22.14.0"
  },
  "scripts": {
    "start:student-app": "pnpm exec nx serve student-app",
    "start:teacher-app": "pnpm exec nx serve teacher-app"
  },
  "private": true,
  "dependencies": {
    "@tailwindcss/vite": "^4.0.15",
    "lucide-react": "^0.511.0",
    "phosphor-react": "^1.4.1",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-router-dom": "6.29.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.8.0",
    "@nx/eslint": "21.0.3",
    "@nx/eslint-plugin": "21.0.3",
    "@nx/js": "21.0.3",
    "@nx/react": "21.0.3",
    "@nx/rollup": "21.0.3",
    "@nx/vite": "21.0.3",
    "@nx/web": "21.0.3",
    "@nx/workspace": "21.0.3",
    "@swc-node/register": "~1.9.1",
    "@swc/cli": "~0.6.0",
    "@swc/core": "~1.5.7",
    "@swc/helpers": "~0.5.11",
    "@types/node": "^20.0.0",
    "@types/react": "19.0.0",
    "@types/react-dom": "19.0.0",
    "@vitejs/plugin-react": "^4.2.0",
    "@vitest/ui": "^3.0.0",
    "autoprefixer": "10.4.13",
    "daisyui": "^4.12.24",
    "eslint": "^9.8.0",
    "eslint-config-prettier": "^10.0.0",
    "eslint-plugin-import": "2.31.0",
    "eslint-plugin-jsx-a11y": "6.10.1",
    "eslint-plugin-react": "7.35.0",
    "eslint-plugin-react-hooks": "5.0.0",
    "jiti": "2.4.2",
    "jsdom": "~22.1.0",
    "jsonc-eslint-parser": "^2.1.0",
    "nx": "^21.0.3",
    "postcss": "8.4.38",
    "prettier": "^2.6.2",
    "rollup": "^4.14.0",
    "swc-loader": "0.1.15",
    "tailwindcss": "3.4.3",
    "tslib": "^2.3.0",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.19.0",
    "verdaccio": "^6.0.5",
    "vite": "^6.0.0",
    "vitest": "^3.0.0"
  },
  "nx": {
    "includedScripts": [],
    "targets": {
      "local-registry": {
        "executor": "@nx/js:verdaccio",
        "options": {
          "port": 4873,
          "config": ".verdaccio/config.yml",
          "storage": "tmp/local-registry/storage"
        }
      }
    }
  }
}
</file>

</files>
