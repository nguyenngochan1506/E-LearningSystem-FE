This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.editorconfig
.github/instructions/nx.instructions.md
.github/workflows/ci.yml
.gitignore
.npmrc
.prettierignore
.prettierrc
apps/student-app/eslint.config.mjs
apps/student-app/index.html
apps/student-app/package.json
apps/student-app/postcss.config.js
apps/student-app/src/app/app.tsx
apps/student-app/src/app/components/common/GlobalContex.tsx
apps/student-app/src/app/components/common/translate/header.translate.tsx
apps/student-app/src/app/components/common/translate/home.translate.tsx
apps/student-app/src/app/components/common/translate/translate.tsx
apps/student-app/src/app/components/layout/Footer.tsx
apps/student-app/src/app/components/layout/Header.tsx
apps/student-app/src/app/components/ui/Course.tsx
apps/student-app/src/app/components/ui/Slider.tsx
apps/student-app/src/app/pages/home/Home.tsx
apps/student-app/src/app/pages/home/SectionCourse.tsx
apps/student-app/src/app/pages/login/Login.tsx
apps/student-app/src/app/types/CourseType.tsx
apps/student-app/src/app/types/LanguageType.tsx
apps/student-app/src/main.tsx
apps/student-app/src/styles.css
apps/student-app/tailwind.config.js
apps/student-app/tsconfig.app.json
apps/student-app/tsconfig.json
apps/student-app/vite.config.ts
eslint.config.mjs
nx.json
package.json
pnpm-workspace.yaml
README.md
tsconfig.base.json
tsconfig.json

================================================================
Files
================================================================

================
File: .editorconfig
================
# Editor configuration, see http://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
max_line_length = off
trim_trailing_whitespace = false

================
File: .github/instructions/nx.instructions.md
================
---
applyTo: '**'
---

// This file is automatically generated by Nx Console

You are in an nx workspace using Nx 21.0.3 and pnpm as the package manager.

You have access to the Nx MCP server and the tools it provides. Use them. Follow these guidelines in order to best help the user:

# General Guidelines
- When answering questions, use the nx_workspace tool first to gain an understanding of the workspace architecture
- For questions around nx configuration, best practices or if you're unsure, use the nx_docs tool to get relevant, up-to-date docs!! Always use this instead of assuming things about nx configuration
- If the user needs help with an Nx configuration or project graph error, use the 'nx_workspace' tool to get any errors
- To help answer questions about the workspace structure or simply help with demonstrating how tasks depend on each other, use the 'nx_visualize_graph' tool

# Generation Guidelines
If the user wants to generate something, use the following flow:

- learn about the nx workspace and any specifics the user needs by using the 'nx_workspace' tool and the 'nx_project_details' tool if applicable
- get the available generators using the 'nx_generators' tool
- decide which generator to use. If no generators seem relevant, check the 'nx_available_plugins' tool to see if the user could install a plugin to help them
- get generator details using the 'nx_generator_schema' tool
- you may use the 'nx_docs' tool to learn more about a specific generator or technology if you're unsure
- decide which options to provide in order to best complete the user's request. Don't make any assumptions and keep the options minimalistic
- open the generator UI using the 'nx_open_generate_ui' tool
- wait for the user to finish the generator
- read the generator log file using the 'nx_read_generator_log' tool
- use the information provided in the log file to answer the user's question or continue with what they were doing
undefined

# CI Error Guidelines
If the user wants help with fixing an error in their CI pipeline, use the following flow:
- Retrieve the list of current CI Pipeline Executions (CIPEs) using the 'nx_cloud_cipe_details' tool
- If there are any errors, use the 'nx_cloud_fix_cipe_failure' tool to retrieve the logs for a specific task
- Use the task logs to see what's wrong and help the user fix their problem. Use the appropriate tools if necessary
- Make sure that the problem is fixed by running the task that you passed into the 'nx_cloud_fix_cipe_failure' tool

================
File: .github/workflows/ci.yml
================
name: CI

on:
  push:
    branches:
      - master
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9.8.0
          run_install: false

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: pnpm dlx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # - run: pnpm exec nx-cloud record -- echo Hello World
      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      - run: pnpm exec nx affected -t lint test build

================
File: .gitignore
================
# See https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# compiled output
dist
tmp
out-tsc

# dependencies
node_modules

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# misc
/.sass-cache
/connect.lock
/coverage
/libpeerconnection.log
npm-debug.log
yarn-error.log
testem.log
/typings

# System Files
.DS_Store
Thumbs.db

.nx/cache
.nx/workspace-data

vite.config.*.timestamp*
vitest.config.*.timestamp*
.cursor\rules\nx-rules.mdc
.github\instructions\nx.instructions.md

================
File: .npmrc
================
strict-peer-dependencies=false
auto-install-peers=true

================
File: .prettierignore
================
# Add files here to ignore them from prettier formatting
/dist
/coverage
/.nx/cache
/.nx/workspace-data

================
File: .prettierrc
================
{
  "singleQuote": true
}

================
File: apps/student-app/eslint.config.mjs
================
import nx from '@nx/eslint-plugin';
import baseConfig from '../../eslint.config.mjs';

export default [
  ...baseConfig,
  ...nx.configs['flat/react'],
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],
    // Override or add rules here
    rules: {},
  },
];

================
File: apps/student-app/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Hệ Thống Dạy Học Trực Tuyến</title>
    <base href="/" />

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="stylesheet" href="/src/styles.css" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: apps/student-app/package.json
================
{
  "name": "@./student-app",
  "version": "0.0.1",
  "private": true,
  "nx": {
    "name": "student-app"
  }
}

================
File: apps/student-app/postcss.config.js
================
const { join } = require('path');

// Note: If you use library-specific PostCSS/Tailwind configuration then you should remove the `postcssConfig` build
// option from your application's configuration (i.e. project.json).
//
// See: https://nx.dev/guides/using-tailwind-css-in-react#step-4:-applying-configuration-to-libraries

module.exports = {
  plugins: {
    tailwindcss: {
      config: join(__dirname, 'tailwind.config.js'),
    },
    autoprefixer: {},
  },
};

================
File: apps/student-app/src/app/app.tsx
================
import { Route, Routes } from 'react-router-dom';
import Home from './pages/home/Home';
import Header from './components/layout/Header';
import Login from './pages/login/Login';

export function App() {
  return (
    <div>
      <Header />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/login" element={<Login />} />
      </Routes>
    </div>
  );
}

export default App;

================
File: apps/student-app/src/app/components/common/GlobalContex.tsx
================
import { createContext, useContext, useEffect, useState } from 'react';
import { LanguageType } from '../../types/LanguageType';

export interface GlobalType {
  language: LanguageType;
  setLanguage: (language: LanguageType) => void;
}

export const GlobalContext = createContext<GlobalType | undefined>(undefined);
export const GlobalContextProvider = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  const [language, setLanguage] = useState<LanguageType>('vi');

  useEffect(() => {
    const storedLanguage = localStorage.getItem('language') as LanguageType;
    if (storedLanguage) {
      setLanguage(storedLanguage);
    }
  }, []);

  return (
    <GlobalContext.Provider
      value={{
        language,
        setLanguage,
      }}
    >
      {children}
    </GlobalContext.Provider>
  );
};

export const useGlobalContext = () => {
  const context = useContext(GlobalContext);
  if (!context) {
    throw new Error('not exist context');
  }

  const changeLanguage = (language: LanguageType) => {
    localStorage.setItem('language', language);
    context.setLanguage(language);
  };

  return { ...context, changeLanguage };
};

================
File: apps/student-app/src/app/components/common/translate/header.translate.tsx
================
export default {
  HOME_PAGE: {
    vi: 'Trang chủ',
    en: 'Home',
  },
  COURSES: {
    vi: 'Khóa học',
    en: 'Courses',
  },
  LIBRARY: {
    vi: 'Thư viện',
    en: 'Library',
  },
  FORUM: {
    vi: 'Diễn đàn',
    en: 'Forum',
  },
  SEARCH: {
    vi: 'Tìm kiếm khoá học',
    en: 'Search course',
  },
  LOGIN: {
    vi: 'Đăng nhập',
    en: 'Login',
  },
  SIGN_UP: {
    vi: 'Đăng ký',
    en: 'Sign up',
  },
  LOGOUT: {
    vi: 'Đăng xuất',
    en: 'Logout',
  },
  PROFILE: {
    vi: 'Hồ sơ',
    en: 'Profile',
  },
  SETTINGS: {
    vi: 'Cài đặt',
    en: 'Settings',
  },
};

================
File: apps/student-app/src/app/components/common/translate/home.translate.tsx
================
export default {
  NEW_COURSE: {
    vi: 'Khóa học mới nhất',
    en: 'Latest course',
  },
  FREE_COURSE: {
    vi: 'Khóa học miễn phí',
    en: 'Free course',
  },
  PAID_COURSE: {
    vi: 'Khóa học trả phí',
    en: 'Paid course',
  },
};

================
File: apps/student-app/src/app/components/common/translate/translate.tsx
================
import * as header from './header.translate';
import * as home from './home.translate';

const Translations: Record<string, Record<string, string>> = {
  ...header.default,
  ...home.default,
};

export const translate = (key: string) => {
  const language = localStorage.getItem('language') || 'vi';

  return Translations[key]?.[language] || key;
};

================
File: apps/student-app/src/app/components/layout/Footer.tsx
================
const Footer = () => {
  return (
    <footer className="bg-white text-gray-600 p-4 text-center">
      <div className="flex justify-center space-x-8 mb-4">
        <div>
          <h3 className="font-bold">Ứng dụng</h3>
          <p className="text-gray-500">Nền tảng học tập trực tuyến</p>
        </div>
        <div>
          <h3 className="font-bold">Liên kết nhân</h3>
          <p>Về chúng tôi</p>
          <p>Blog</p>
        </div>
        <div>
          <h3 className="font-bold">Hỗ trợ</h3>
          <p>FAQ</p>
          <p>Liên hệ</p>
        </div>
        <div>
          <h3 className="font-bold">MXH</h3>
          <div className="flex space-x-2">
            <a
              href="https://facebook.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M22.675 0H1.325C.593 0 0 .593 0 1.325v21.351C0 23.407.593 24 1.325 24H12.82v-9.294H9.692v-3.622h3.128V8.413c0-3.1 1.893-4.788 4.659-4.788 1.325 0 2.463.099 2.795.143v3.24l-1.918.001c-1.504 0-1.795.715-1.795 1.763v2.313h3.587l-.467 3.622h-3.12V24h6.116c.732 0 1.325-.593 1.325-1.324V1.325C24 .593 23.407 0 22.675 0z" />
              </svg>
            </a>
            <a
              href="https://youtube.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 9.71 0 12 0 12s0 2.29.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 14.29 24 12 24 12s0-2.29-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />
              </svg>
            </a>
          </div>
        </div>
      </div>
      <p className="text-sm">© 2024 Ứng dụng</p>
    </footer>
  );
};

export default Footer;

================
File: apps/student-app/src/app/components/layout/Header.tsx
================
import { Link } from 'react-router-dom';
import { useGlobalContext } from '../common/GlobalContex';
import { LanguageFlag, LanguageList } from '../../types/LanguageType';
import { translate } from '../common/translate/translate';

const Header = () => {
  const { language, changeLanguage } = useGlobalContext();

  return (
    <header className="bg-blue-900 text-white p-2 flex items-center justify-between sticky top-0 z-50 text-lg px-8">
      <div className="flex items-center space-x-4">
        <Link to="/" className="flex items-center">
          <img src="./logo.png" alt="logo" width={'60px'} />
        </Link>
        <nav className="space-x-4 hidden md:flex">
          <Link to="/" className="hover:underline">
            {translate('HOME_PAGE')}
          </Link>
          <Link to="/courses" className="hover:underline">
            {translate('COURSES')}
          </Link>
          <Link to="/library" className="hover:underline">
            {translate('LIBRARY')}
          </Link>
          <Link to="/forum" className="hover:underline">
            {translate('FORUM')}
          </Link>
        </nav>
      </div>
      <div className="flex items-center space-x-2 text-black">
        <div className="relative">
          <label className="input input-bordered flex items-center gap-2">
            <input
              type="text"
              className="grow"
              placeholder={translate('SEARCH')}
            />
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 16 16"
              fill="currentColor"
              className="h-4 w-4 opacity-70"
            >
              <path
                fillRule="evenodd"
                d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z"
                clipRule="evenodd"
              />
            </svg>
          </label>
        </div>
        {/* <Link to="/profile" className="bg-gray-300 p-2 rounded-full">
          <svg
            className="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
        </Link> */}
        <div>
          <Link to="/login" className="btn btn-primary text-lg">
            {translate('LOGIN')}
          </Link>
        </div>
        <div className="dropdown dropdown-end">
          <div tabIndex={0} role="button" className="btn btn-ghost">
            <img src={LanguageFlag[language]} width={'48px'} alt="icon" />
          </div>
          <ul
            tabIndex={0}
            className="dropdown-content menu bg-base-100 rounded-box z-[1] w-24 p-2 shadow"
          >
            {LanguageList.map((item) => (
              <li
                key={item.code}
                onClick={() => {
                  changeLanguage(item.code);
                }}
              >
                <div>
                  <img src={item.flag} width={'24px'} alt="icon" />
                  {item.code}
                </div>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </header>
  );
};

export default Header;

================
File: apps/student-app/src/app/components/ui/Course.tsx
================
import { Link } from 'react-router-dom';
import { CourseType } from '../../types/CourseType';

interface CourseProps {
  course: CourseType;
}

const Course = ({ course }: CourseProps) => {
  return (
    <div key={course.id} className="card bg-base-100 shadow-xl">
      <figure>
        <img
          src={course.image}
          alt={course.title}
          className="h-48 w-full object-cover"
        />
      </figure>
      <div className="card-body">
        <h2 className="card-title">{course.title}</h2>
        {course.type === 'paid' ? (
          <p>{course.price.toLocaleString('vi-VN')} VNĐ</p>
        ) : (
          <p>Miễn phí</p>
        )}
        <div className="card-actions justify-end">
          <Link to={`/course/${course.id}`} className="btn btn-primary">
            Xem chi tiết
          </Link>
        </div>
      </div>
    </div>
  );
};

export default Course;

================
File: apps/student-app/src/app/components/ui/Slider.tsx
================
import { Link } from 'react-router-dom';

const Slider = () => {
  return (
    <div className="carousel w-full">
      <div id="slide1" className="carousel-item relative w-full">
        <img
          src="https://placehold.co/1200x400?text=Hero+Image+1"
          className="w-full"
          alt="slide 1"
        />
        <div className="hero-overlay bg-opacity-60 absolute inset-0"></div>
        <div className="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
          <a href="#slide4" className="btn btn-circle">
            ❮
          </a>
          <a href="#slide2" className="btn btn-circle">
            ❯
          </a>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white">
          <div className="max-w-md">
            <h1 className="mb-5 text-5xl font-bold">Học mọi lúc, mọi nơi</h1>
            <p className="mb-5">
              Tham gia các khóa học trực tuyến chất lượng cao để nâng cao kỹ
              năng của bạn!
            </p>
            <Link to="/courses" className="btn btn-primary">
              Khám phá ngay
            </Link>
          </div>
        </div>
      </div>
      <div id="slide2" className="carousel-item relative w-full">
        <img
          src="https://placehold.co/1200x400?text=Hero+Image+2"
          className="w-full"
          alt="slide 2"
        />
        <div className="hero-overlay bg-opacity-60 absolute inset-0"></div>
        <div className="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
          <a href="#slide1" className="btn btn-circle">
            ❮
          </a>
          <a href="#slide3" className="btn btn-circle">
            ❯
          </a>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white">
          <div className="max-w-md">
            <h1 className="mb-5 text-5xl font-bold">Khóa học đa dạng</h1>
            <p className="mb-5">
              Khám phá hàng trăm khóa học từ cơ bản đến nâng cao!
            </p>
            <Link to="/courses" className="btn btn-primary">
              Khám phá ngay
            </Link>
          </div>
        </div>
      </div>
      <div id="slide3" className="carousel-item relative w-full">
        <img
          src="https://placehold.co/1200x400?text=Hero+Image+3"
          className="w-full"
          alt="slide 3"
        />
        <div className="hero-overlay bg-opacity-60 absolute inset-0"></div>
        <div className="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
          <a href="#slide2" className="btn btn-circle">
            ❮
          </a>
          <a href="#slide4" className="btn btn-circle">
            ❯
          </a>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white">
          <div className="max-w-md">
            <h1 className="mb-5 text-5xl font-bold">Học mọi lúc, mọi nơi</h1>
            <p className="mb-5">
              Tham gia các khóa học trực tuyến chất lượng cao để nâng cao kỹ
              năng của bạn!
            </p>
            <Link to="/courses" className="btn btn-primary">
              Khám phá ngay
            </Link>
          </div>
        </div>
      </div>
      <div id="slide4" className="carousel-item relative w-full">
        <img
          src="https://placehold.co/1200x400?text=Hero+Image+4"
          className="w-full"
          alt="slide 4"
        />
        <div className="hero-overlay bg-opacity-60 absolute inset-0"></div>
        <div className="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
          <a href="#slide3" className="btn btn-circle">
            ❮
          </a>
          <a href="#slide1" className="btn btn-circle">
            ❯
          </a>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-white">
          <div className="max-w-md">
            <h1 className="mb-5 text-5xl font-bold">Học cùng cộng đồng</h1>
            <p className="mb-5">
              Kết nối với hàng ngàn học viên trên toàn thế giới!
            </p>
            <Link to="/courses" className="btn btn-primary">
              Khám phá ngay
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Slider;

================
File: apps/student-app/src/app/pages/home/Home.tsx
================
import { CourseType } from '../../types/CourseType';
import Slider from '../../components/ui/Slider';
import SectionCourse from './SectionCourse';
import Footer from '../../components/layout/Footer';
import { useGlobalContext } from '../../components/common/GlobalContex';
import { translate } from '../../components/common/translate/translate';

const courses: CourseType[] = [
  {
    id: 1,
    title: 'Lập trình JavaScript Cơ bản',
    type: 'free',
    image: 'https://placehold.co/300x200',
    price: 0,
    isNew: true,
  },
  {
    id: 2,
    title: 'React Nâng cao',
    type: 'paid',
    image: 'https://placehold.co/300x200',
    price: 499000,
    isNew: false,
  },
  {
    id: 3,
    title: 'HTML & CSS cho người mới',
    type: 'free',
    image: 'https://placehold.co/300x200',
    price: 0,
    isNew: true,
  },
  {
    id: 4,
    title: 'Node.js Chuyên sâu',
    type: 'paid',
    image: 'https://placehold.co/300x200',
    price: 799000,
    isNew: true,
  },
];

const Home = () => {
  const { language } = useGlobalContext();
  return (
    <div className="min-h-screen bg-gray-100">
      {/* Slider */}
      <Slider />

      {/* Free Courses */}
      <SectionCourse title={translate('NEW_COURSE')} courses={courses} />

      {/* Paid Courses */}
      <SectionCourse title={translate('FREE_COURSE')} courses={courses} />

      {/* Latest Courses */}
      <SectionCourse title={translate('PAID_COURSE')} courses={courses} />

      {/* Footer */}
      <Footer />
    </div>
  );
};

export default Home;

================
File: apps/student-app/src/app/pages/home/SectionCourse.tsx
================
import Course from '../../components/ui/Course';
import { CourseType } from '../../types/CourseType';

interface SectionCourseProps {
  title: string;
  courses: CourseType[];
}

const SectionCourse = ({ courses, title }: SectionCourseProps) => {
  return (
    <section className="py-12 px-4 bg-base-300">
      <h2 className="text-3xl font-bold text-center mb-8">{title}</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {courses.map((course) => (
          <Course key={course.id} course={course} />
        ))}
      </div>
    </section>
  );
};

export default SectionCourse;

================
File: apps/student-app/src/app/pages/login/Login.tsx
================
import { BookOpen, FacebookLogo, GoogleLogo } from 'phosphor-react';
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleLogin = () => {
    // Giả lập đăng nhập thành công
    if (username && password) {
      navigate('/'); // Điều hướng về trang chủ sau khi đăng nhập
    }
  };

  return (
    <div
      className="min-h-screen flex items-center justify-center bg-cover bg-center"
      style={{
        backgroundImage:
          'url(https://placehold.co/1200x800?text=Background+Image)',
      }}
    >
      <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md">
        {/* Logo */}
        <div className="flex justify-center mb-6">
          <h1 className="text-3xl font-bold text-blue-600 flex items-center">
            <BookOpen size={32} /> E-Learning
          </h1>
        </div>

        {/* Form */}
        <div className="space-y-4">
          <div className="form-control">
            <input
              type="text"
              placeholder="Email..."
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="input input-bordered w-full"
            />
          </div>
          <div className="form-control">
            <input
              type="password"
              placeholder="Mật khẩu..."
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="input input-bordered w-full"
            />
          </div>
          <button onClick={handleLogin} className="btn btn-primary w-full">
            Đăng nhập
          </button>
        </div>

        {/* Divider */}
        <div className="divider my-6">HOẶC</div>

        {/* Social Login Buttons */}
        <div className="space-y-3">
          <button className="btn btn-outline w-full flex items-center justify-center">
            <GoogleLogo size={24} weight="bold" />
            Đăng nhập qua Google
          </button>
          <button className="btn btn-outline w-full flex items-center justify-center">
            <FacebookLogo size={24} weight="bold" />
            Đăng nhập qua Facebook
          </button>
        </div>

        {/* Register Link */}
        <div className="text-center mt-4">
          <p>
            Bạn chưa có tài khoản?{' '}
            <Link to="/register" className="text-blue-600 hover:underline">
              Đăng ký ngay
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;

================
File: apps/student-app/src/app/types/CourseType.tsx
================
export type CourseType = {
  id: number;
  title: string;
  image: string;
  type: 'free' | 'paid';
  price: number;
  isNew: boolean;
};

================
File: apps/student-app/src/app/types/LanguageType.tsx
================
export const LanguageCode = {
  vi: 'vi',
  en: 'en',
};
export type LanguageType = keyof typeof LanguageCode;
export const LanguageFlag = {
  [LanguageCode.vi]: './icons/vi-icon.png',
  [LanguageCode.en]: './icons/en-icon.png',
};

export const LanguageList = [
  {
    code: LanguageCode.vi as LanguageType,
    flag: LanguageFlag[LanguageCode.vi],
  },
  {
    code: LanguageCode.en as LanguageType,
    flag: LanguageFlag[LanguageCode.en],
  },
];

================
File: apps/student-app/src/main.tsx
================
import { StrictMode } from 'react';
import { BrowserRouter } from 'react-router-dom';
import * as ReactDOM from 'react-dom/client';
import App from './app/app';
import './styles.css';
import { GlobalContextProvider } from './app/components/common/GlobalContex';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <GlobalContextProvider>
    <StrictMode>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </StrictMode>
  </GlobalContextProvider>
);

================
File: apps/student-app/src/styles.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
/* You can add global styles to this file, and also import other style files */

================
File: apps/student-app/tailwind.config.js
================
const { createGlobPatternsForDependencies } = require('@nx/react/tailwind');
const { join } = require('path');

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    join(
      __dirname,
      '{src,pages,components,app}/**/*!(*.stories|*.spec).{ts,tsx,html}'
    ),
    ...createGlobPatternsForDependencies(__dirname),
  ],
  theme: {
    extend: {},
  },
  plugins: [require('daisyui')],
};

================
File: apps/student-app/tsconfig.app.json
================
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "dist",
    "tsBuildInfoFile": "dist/tsconfig.app.tsbuildinfo",
    "jsx": "react-jsx",
    "lib": ["dom"],
    "types": [
      "node",
      "@nx/react/typings/cssmodule.d.ts",
      "@nx/react/typings/image.d.ts",
      "vite/client"
    ],
    "rootDir": "src"
  },
  "exclude": [
    "out-tsc",
    "dist",
    "src/**/*.spec.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.tsx",
    "src/**/*.test.tsx",
    "src/**/*.spec.js",
    "src/**/*.test.js",
    "src/**/*.spec.jsx",
    "src/**/*.test.jsx",
    "eslint.config.js",
    "eslint.config.cjs",
    "eslint.config.mjs"
  ],
  "include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]
}

================
File: apps/student-app/tsconfig.json
================
{
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    }
  ],
  "extends": "../../tsconfig.base.json"
}

================
File: apps/student-app/vite.config.ts
================
/// <reference types='vitest' />
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
// import tailwindcss from '@tailwindcss/vite';

export default defineConfig(() => ({
  root: __dirname,
  cacheDir: '../../node_modules/.vite/apps/student-app',
  server: {
    port: 4200,
    host: 'localhost',
  },
  preview: {
    port: 4300,
    host: 'localhost',
  },
  plugins: [react()],
  
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  build: {
    outDir: './dist',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
  },
}));

================
File: eslint.config.mjs
================
import nx from '@nx/eslint-plugin';

export default [
  ...nx.configs['flat/base'],
  ...nx.configs['flat/typescript'],
  ...nx.configs['flat/javascript'],
  {
    ignores: [
      '**/dist',
      '**/vite.config.*.timestamp*',
      '**/vitest.config.*.timestamp*',
    ],
  },
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],
    rules: {
      '@nx/enforce-module-boundaries': [
        'error',
        {
          enforceBuildableLibDependency: true,
          allow: ['^.*/eslint(\\.base)?\\.config\\.[cm]?js$'],
          depConstraints: [
            {
              sourceTag: '*',
              onlyDependOnLibsWithTags: ['*'],
            },
          ],
        },
      ],
    },
  },
  {
    files: [
      '**/*.ts',
      '**/*.tsx',
      '**/*.cts',
      '**/*.mts',
      '**/*.js',
      '**/*.jsx',
      '**/*.cjs',
      '**/*.mjs',
    ],
    // Override or add rules here
    rules: {},
  },
];

================
File: nx.json
================
{
  "$schema": "./node_modules/nx/schemas/nx-schema.json",
  "defaultBase": "master",
  "namedInputs": {
    "default": ["{projectRoot}/**/*", "sharedGlobals"],
    "production": [
      "default",
      "!{projectRoot}/.eslintrc.json",
      "!{projectRoot}/eslint.config.mjs",
      "!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)",
      "!{projectRoot}/tsconfig.spec.json",
      "!{projectRoot}/src/test-setup.[jt]s"
    ],
    "sharedGlobals": ["{workspaceRoot}/.github/workflows/ci.yml"]
  },
  "nxCloudId": "682c3f85ea6e6035f0a92a28",
  "plugins": [
    {
      "plugin": "@nx/js/typescript",
      "options": {
        "typecheck": {
          "targetName": "typecheck"
        },
        "build": {
          "targetName": "build",
          "configName": "tsconfig.lib.json",
          "buildDepsName": "build-deps",
          "watchDepsName": "watch-deps"
        }
      }
    },
    {
      "plugin": "@nx/react/router-plugin",
      "options": {
        "buildTargetName": "build",
        "devTargetName": "dev",
        "startTargetName": "start",
        "watchDepsTargetName": "watch-deps",
        "buildDepsTargetName": "build-deps",
        "typecheckTargetName": "typecheck"
      }
    },
    {
      "plugin": "@nx/eslint/plugin",
      "options": {
        "targetName": "lint"
      }
    },
    {
      "plugin": "@nx/vite/plugin",
      "options": {
        "buildTargetName": "build",
        "testTargetName": "test",
        "serveTargetName": "serve",
        "devTargetName": "dev",
        "previewTargetName": "preview",
        "serveStaticTargetName": "serve-static",
        "typecheckTargetName": "typecheck",
        "buildDepsTargetName": "build-deps",
        "watchDepsTargetName": "watch-deps"
      }
    }
  ],
  "generators": {
    "@nx/react": {
      "application": {
        "babel": true,
        "style": "tailwind",
        "linter": "eslint",
        "bundler": "vite"
      },
      "component": {
        "style": "tailwind"
      },
      "library": {
        "style": "tailwind",
        "linter": "eslint"
      }
    }
  }
}

================
File: package.json
================
{
  "name": "E-Learning-System",
  "version": "0.0.0",
  "engines": {
    "node": "22.14.0"
  },
  "scripts": {
    "start:student-app": "pnpm exec nx serve student-app"
  },
  "private": true,
  "dependencies": {
    "@tailwindcss/vite": "^4.0.15",
    "phosphor-react": "^1.4.1",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-router-dom": "6.29.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.8.0",
    "@nx/eslint": "21.0.3",
    "@nx/eslint-plugin": "21.0.3",
    "@nx/js": "21.0.3",
    "@nx/react": "21.0.3",
    "@nx/vite": "21.0.3",
    "@nx/web": "21.0.3",
    "@nx/workspace": "21.0.3",
    "@swc-node/register": "~1.9.1",
    "@swc/cli": "~0.6.0",
    "@swc/core": "~1.5.7",
    "@swc/helpers": "~0.5.11",
    "@types/node": "^20.0.0",
    "@types/react": "19.0.0",
    "@types/react-dom": "19.0.0",
    "@vitejs/plugin-react": "^4.2.0",
    "@vitest/ui": "^3.0.0",
    "autoprefixer": "10.4.13",
    "daisyui": "^4.12.24",
    "eslint": "^9.8.0",
    "eslint-config-prettier": "^10.0.0",
    "eslint-plugin-import": "2.31.0",
    "eslint-plugin-jsx-a11y": "6.10.1",
    "eslint-plugin-react": "7.35.0",
    "eslint-plugin-react-hooks": "5.0.0",
    "jiti": "2.4.2",
    "jsdom": "~22.1.0",
    "nx": "21.0.3",
    "postcss": "8.4.38",
    "prettier": "^2.6.2",
    "tailwindcss": "3.4.3",
    "tslib": "^2.3.0",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.19.0",
    "vite": "^6.0.0",
    "vitest": "^3.0.0"
  }
}

================
File: pnpm-workspace.yaml
================
packages: 
  - "apps/*"

================
File: README.md
================
# 

<a alt="Nx logo" href="https://nx.dev" target="_blank" rel="noreferrer"><img src="https://raw.githubusercontent.com/nrwl/nx/master/images/nx-logo.png" width="45"></a>

✨ Your new, shiny [Nx workspace](https://nx.dev) is almost ready ✨.

[Learn more about this workspace setup and its capabilities](https://nx.dev/tutorials/2-react-monorepo/1r-introduction/1-welcome?utm_source=nx_project&amp;utm_medium=readme&amp;utm_campaign=nx_projects) or run `npx nx graph` to visually explore what was created. Now, let's get you up to speed!

## Finish your CI setup

[Click here to finish setting up your workspace!](https://cloud.nx.app/connect/tMMKMyeRff)


## Run tasks

To run the dev server for your app, use:

```sh
npx nx serve student-app
```

To create a production bundle:

```sh
npx nx build student-app
```

To see all available targets to run for a project, run:

```sh
npx nx show project student-app
```

These targets are either [inferred automatically](https://nx.dev/concepts/inferred-tasks?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) or defined in the `project.json` or `package.json` files.

[More about running tasks in the docs &raquo;](https://nx.dev/features/run-tasks?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Add new projects

While you could add new projects to your workspace manually, you might want to leverage [Nx plugins](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) and their [code generation](https://nx.dev/features/generate-code?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) feature.

Use the plugin's generator to create new projects.

To generate a new application, use:

```sh
npx nx g @nx/react:app demo
```

To generate a new library, use:

```sh
npx nx g @nx/react:lib mylib
```

You can use `npx nx list` to get a list of installed plugins. Then, run `npx nx list <plugin-name>` to learn about more specific capabilities of a particular plugin. Alternatively, [install Nx Console](https://nx.dev/getting-started/editor-setup?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) to browse plugins and generators in your IDE.

[Learn more about Nx plugins &raquo;](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) | [Browse the plugin registry &raquo;](https://nx.dev/plugin-registry?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)


[Learn more about Nx on CI](https://nx.dev/ci/intro/ci-with-nx#ready-get-started-with-your-provider?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Install Nx Console

Nx Console is an editor extension that enriches your developer experience. It lets you run tasks, generate code, and improves code autocompletion in your IDE. It is available for VSCode and IntelliJ.

[Install Nx Console &raquo;](https://nx.dev/getting-started/editor-setup?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Useful links

Learn more:

- [Learn more about this workspace setup](https://nx.dev/tutorials/2-react-monorepo/1r-introduction/1-welcome?utm_source=nx_project&amp;utm_medium=readme&amp;utm_campaign=nx_projects)
- [Learn about Nx on CI](https://nx.dev/ci/intro/ci-with-nx?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [Releasing Packages with Nx release](https://nx.dev/features/manage-releases?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [What are Nx plugins?](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

And join the Nx community:
- [Discord](https://go.nx.dev/community)
- [Follow us on X](https://twitter.com/nxdevtools) or [LinkedIn](https://www.linkedin.com/company/nrwl)
- [Our Youtube channel](https://www.youtube.com/@nxdevtools)
- [Our blog](https://nx.dev/blog?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

================
File: tsconfig.base.json
================
{
  "compilerOptions": {
    "composite": true,
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "importHelpers": true,
    "isolatedModules": true,
    "lib": ["es2022"],
    "module": "esnext",
    "moduleResolution": "bundler",
    "noEmitOnError": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noUnusedLocals": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "es2022",
    "customConditions": ["development"]
  }
}

================
File: tsconfig.json
================
{
  "extends": "./tsconfig.base.json",
  "compileOnSave": false,
  "files": [],
  "references": [
    {
      "path": "./apps/student-app"
    }
  ]
}



================================================================
End of Codebase
================================================================
