This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
eslint.config.mjs
index.html
package.json
postcss.config.js
src/app/app.tsx
src/app/components/common/apis/auth.ts
src/app/components/common/GlobalContext.tsx
src/app/components/common/translate/dashboard.translate.tsx
src/app/components/common/translate/grade-assignment.translate.tsx
src/app/components/common/translate/header.translate.tsx
src/app/components/common/translate/login.translate.tsx
src/app/components/common/translate/translate.tsx
src/app/components/common/translate/user-management.translate.tsx
src/app/components/layout/DashBoardLayout.tsx
src/app/components/layout/Footer.tsx
src/app/components/layout/Header.tsx
src/app/components/layout/Modal.tsx
src/app/components/layout/SideBar.tsx
src/app/components/ui/button.tsx
src/app/components/ui/Input.tsx
src/app/pages/course/api.ts
src/app/pages/course/CourseForm.tsx
src/app/pages/course/create_course.tsx
src/app/pages/course/LessonForm.tsx
src/app/pages/course/LessonList.tsx
src/app/pages/course/types.ts
src/app/pages/dashboard/DashBoard.tsx
src/app/pages/grade-assignment/GradeAssignment.tsx
src/app/pages/login/ForgotPassword.tsx
src/app/pages/login/Login.tsx
src/app/pages/user-management/AddUserModal.tsx
src/app/pages/user-management/EditUserModal.tsx
src/app/pages/user-management/UserManagement.tsx
src/app/pages/user-management/UserManagementContext.tsx
src/app/types/LanguageType.tsx
src/main.tsx
src/styles.css
tailwind.config.js
tsconfig.app.json
tsconfig.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="eslint.config.mjs">
import nx from '@nx/eslint-plugin';
import baseConfig from '../../eslint.config.mjs';

export default [
  ...baseConfig,
  ...nx.configs['flat/react'],
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],
    // Override or add rules here
    rules: {},
  },
];
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>TeacherApp</title>
    <base href="/" />

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="stylesheet" href="/src/styles.css" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "teacher-app",
  "version": "0.0.1",
  "private": true,
  "dependencies": {
    "lucide-react": "^0.511.0"
  }
}
</file>

<file path="postcss.config.js">
const { join } = require('path');

// Note: If you use library-specific PostCSS/Tailwind configuration then you should remove the `postcssConfig` build
// option from your application's configuration (i.e. project.json).
//
// See: https://nx.dev/guides/using-tailwind-css-in-react#step-4:-applying-configuration-to-libraries

module.exports = {
  plugins: {
    tailwindcss: {
      config: join(__dirname, 'tailwind.config.js'),
    },
    autoprefixer: {},
  },
};
</file>

<file path="src/app/app.tsx">
import { Route, Routes, Outlet } from 'react-router-dom';
import Login from './pages/login/Login';
import ForgotPassword from './pages/login/ForgotPassword';
import DashBoardLayout from './components/layout/DashBoardLayout';
import DashBoard from './pages/dashboard/DashBoard';
import UserManagement from './pages/user-management/UserManagement';
import CreateCourse from './pages/course/create_course';

import CourseForm from './pages/course/CourseForm';
import GradeAssignment from './pages/grade-assignment/GradeAssignment';
export function App() {
  return (
    <Routes>
      <Route path="/login" element={<Login />} />
      <Route path="/forgot-password" element={<ForgotPassword />} />
      <Route element={<DashBoardLayout children={<Outlet />} />}>
        <Route path="/" element={<DashBoard />} />
        <Route path="/users" element={<UserManagement />} />
        <Route path="/course/create_course" element={<CreateCourse />} />
        <Route path="/course/form/:courseId" element={<CourseForm />} />
        <Route
          path="dashboard/grading/:assignmentId"
          element={<GradeAssignment />}
        />
      </Route>
    </Routes>
  );
}
export async function createCourseAPI(course: any) {
  console.log('Mock creating course:', course);
  return { success: true, data: course };
}
export default App;
</file>

<file path="src/app/components/common/apis/auth.ts">
const API_URL = import.meta.env.VITE_API_URL;

export const login = async (email: string, password: string) => {
    const language = localStorage.getItem('language');
    const response = await fetch(`${API_URL}/auth/login`, {
      method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Accept-Language': language ,
        },
        body: JSON.stringify({
            email,
            password,
            platform: "WEB",
            deviceToken: "1223",
        }),
    });
    
    if (!response.ok) {
        const errorData = await response.json();
        // const messageData = errorData.message;
        console.log(errorData);
        throw new Error(errorData.message);
        }
    const data = await response.json();
    return data.data; // Trả về dữ liệu (ví dụ: token)
};
</file>

<file path="src/app/components/common/GlobalContext.tsx">
import { createContext, useContext, useEffect, useState } from 'react';
import { LanguageType } from '../../types/LanguageType';

export interface GlobalType {
  language: LanguageType;
  setLanguage: (language: LanguageType) => void;
  isLogin: boolean;
  setIsLogin: (isLogin: boolean) => void;
}

export const GlobalContext = createContext<GlobalType | undefined>(undefined);
export const GlobalContextProvider = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  const [language, setLanguage] = useState<LanguageType>('vi');
  const [isLogin, setIsLogin] = useState<boolean>(false);

  useEffect(() => {
    const storedLanguage = localStorage.getItem('language') as LanguageType;
    if (storedLanguage) {
      setLanguage(storedLanguage);
    }
  }, []);

  return (
    <GlobalContext.Provider
      value={{
        language,
        setLanguage,
        isLogin,
        setIsLogin,
      }}
    >
      {children}
    </GlobalContext.Provider>
  );
};

export const useGlobalContext = () => {
  const context = useContext(GlobalContext);
  if (!context) {
    throw new Error('not exist context');
  }

  const changeLanguage = (language: LanguageType) => {
    localStorage.setItem('language', language);
    context.setLanguage(language);
  };

  return { ...context, changeLanguage };
};
</file>

<file path="src/app/components/common/translate/dashboard.translate.tsx">
export default {
  HOME: {
    vi: 'Trang chủ',
    en: 'Home',
  },
  AUTHORIZATION: {
    vi: 'Phân quyền',
    en: 'Authorization',
  },
  USERS: {
    vi: 'Người dùng',
    en: 'Users',
  },
};
</file>

<file path="src/app/components/common/translate/grade-assignment.translate.tsx">
export default {
  DEADLINE_LOCKED: {
    vi: 'Không thể chấm bài do bài tập đã bị khóa.',
    en: 'Cannot grade, assignment is locked.',
  },
  NO_PERMISSION: {
    vi: 'Bạn không có quyền chấm bài này.',
    en: 'You do not have permission to grade this.',
  },
  INVALID_GRADE: {
    vi: 'Điểm phải là một số hợp lệ từ 0–10.',
    en: 'Score must be a valid number between 0 and 10.',
  },
  GRADE_SUCCESS: { vi: 'Chấm điểm thành công.', en: 'Grading successful.' },
  SUBMISSIONS_LIST: { vi: 'Danh sách bài nộp', en: 'Submissions List' },
  SUBMISSION_DETAIL: { vi: 'Chi tiết bài nộp', en: 'Submission Detail' },
  STUDENT_NAME: { vi: 'Họ và tên:', en: 'Student:' },
  SUBMISSION_DATE: { vi: 'Ngày nộp:', en: 'Date:' },
  CONTENT: { vi: 'Nội dung:', en: 'Content:' },
  ATTACHED_FILE: { vi: 'Tệp đính kèm:', en: 'Attached File:' },
  ENTER_GRADE: { vi: 'Nhập điểm (0-10):', en: 'Enter Grade (0-10):' },
  SAVE_GRADE: { vi: 'Lưu điểm', en: 'Save Grade' },
  GRADED_STATUS: { vi: 'Trạng thái:', en: 'Status:' },
  GRADED: { vi: 'Đã chấm', en: 'Graded' },
  SELECT_SUBMISSION: {
    vi: 'Vui lòng chọn một bài nộp để chấm.',
    en: 'Please select a submission to grade.',
  },
  NO_SUBMISSIONS: {
    vi: 'Không có bài nộp nào.',
    en: 'No submissions available.',
  },
  FEEDBACK: { vi: 'Phản hồi:', en: 'Feedback:' },
  ENTER_FEEDBACK: {
    vi: 'Nhập phản hồi tại đây...',
    en: 'Enter feedback here...',
  },
  DOWNLOAD_FILE: { vi: 'Tải tệp', en: 'Download File' },
  FILE_NOT_AVAILABLE: { vi: 'Tệp không khả dụng.', en: 'File not available.' },
};
</file>

<file path="src/app/components/common/translate/header.translate.tsx">
export default {
  HOME_PAGE: {
    vi: 'Trang chủ',
    en: 'Home',
  },
  COURSES: {
    vi: 'Khóa học',
    en: 'Courses',
  },
  LIBRARY: {
    vi: 'Thư viện',
    en: 'Library',
  },
  FORUM: {
    vi: 'Diễn đàn',
    en: 'Forum',
  },
  SEARCH: {
    vi: 'Tìm kiếm khoá học',
    en: 'Search course',
  },
  LOGIN: {
    vi: 'Đăng nhập',
    en: 'Login',
  },
  SIGN_UP: {
    vi: 'Đăng ký',
    en: 'Sign up',
  },
  LOGOUT: {
    vi: 'Đăng xuất',
    en: 'Logout',
  },
  PROFILE: {
    vi: 'Hồ sơ',
    en: 'Profile',
  },
  SETTINGS: {
    vi: 'Cài đặt',
    en: 'Settings',
  },
  APPLICATION: {
    vi: 'Ứng dụng',
    en: 'Application',
  },
  E_LEARNING: {
    vi: 'Học tập trực tuyến',
    en: 'E-learning',
  },
  ABOUT_US: {
    vi: 'Về chúng tôi',
    en: 'About us',
  },
  BLOG: {
    vi: 'Blog',
    en: 'Blog',
  },
  SUPPORT: {
    vi: 'Hỗ trợ',
    en: 'Support',
  },
  FAQ: {
    vi: 'Câu hỏi thường gặp',
    en: 'FAQ',
  },
  CONTACT: {
    vi: 'Liên hệ',
    en: 'Contact',
  },
  SOCIAL_MEDIA: {
    vi: 'Mạng xã hội',
    en: 'Social media',
  },
  COPYRIGHT_2025: {
    vi: 'Bản quyền © 2025 E-Learning. Đã đăng ký bản quyền.',
    en: 'Copyright © 2025 E-Learning. All rights reserved.',
  },
  LINKS: {
    vi: 'Liên kết',
    en: 'Links',
  },
};
</file>

<file path="src/app/components/common/translate/login.translate.tsx">
export default {
  LOGIN: {
    vi: 'Đăng nhập',
    en: 'Login',
  },
  EMAIL: {
    vi: 'Email...',
    en: 'Email...',
  },
  PASSWORD: {
    vi: 'Mật khẩu...',
    en: 'Password...',
  },
  LOGIN_WITH_GOOGLE: {
    vi: 'Đăng nhập qua Google',
    en: 'Login with Google',
  },
  LOGIN_WITH_FACEBOOK: {
    vi: 'Đăng nhập qua Facebook',
    en: 'Login with Facebook',
  },
  OR: {
    vi: 'HOẶC',
    en: 'OR',
  },
  PHONE: {
    vi: 'Số điện thoại',
    en: 'Phone number',
  },

  REGISTER_LINK_TEXT: {
    vi: 'Bạn chưa có tài khoản? Đăng ký ngay',
    en: "Don't have an account? Sign up now",
  },
  DATE_OF_BIRTH: {
    vi: 'Ngày sinh',
    en: 'Date of birth',
  },
  ENTER_EMAIL: {
    vi: 'Nhập email...',
    en: 'Enter email...',
  },
  ENTER_PASSWORD: {
    vi: 'Nhập mật khẩu...',
    en: 'Enter password...',
  },
  ENTER_USER_NAME: {
    vi: 'Nhập tên người dùng...',
    en: 'Enter user name...',
  },
  ENTER_PHONE: {
    vi: 'Nhập số điện thoại...',
    en: 'Enter phone number...',
  },
  USER_NAME: {
    vi: 'Tên người dùng',
    en: 'User name',
  },
  CANCEL: {
    vi: 'Hủy',
    en: 'Cancel',
  },
};
</file>

<file path="src/app/components/common/translate/translate.tsx">
import * as header from './header.translate';
import * as login from './login.translate';
import * as dashboard from './dashboard.translate';
import * as userManagement from './user-management.translate';
import * as gradeAssignment from './grade-assignment.translate';

const Translations: Record<string, Record<string, string>> = {
  ...header.default,
  ...login.default,
  ...userManagement.default,
  ...dashboard.default,
  ...gradeAssignment.default,
  // Các chuỗi chung cho teacher
  BACK_TO_COURSES: { vi: 'Quay lại khóa học', en: 'Back to Courses' },
  SESSION_EXPIRED: {
    vi: 'Phiên làm việc đã hết hạn, vui lòng đăng nhập lại.',
    en: 'Session expired, please log in again.',
  },
  LOAD_ERROR: { vi: 'Tải dữ liệu thất bại.', en: 'Failed to load assignment.' },
  LOADING: { vi: 'Đang tải...', en: 'Loading...' },
};

export const translate = (key: string) => {
  const language = localStorage.getItem('language') || 'vi';
  return Translations[key]?.[language] || key;
};
</file>

<file path="src/app/components/common/translate/user-management.translate.tsx">
export default {
  USER_MANAGEMENT: {
    vi: 'Quản lý người dùng',
    en: 'User Management',
  },
  USER_NAME: {
    vi: 'Tên người dùng',
    en: 'User Name',
  },
  USER_ROLE: {
    vi: 'Vai trò',
    en: 'Role',
  },
  ACTION: {
    vi: 'Hành động',
    en: 'Action',
  },
  ADD_USER: {
    vi: 'Thêm người dùng',
    en: 'Add User',
  },
  EDIT: {
    vi: 'Chỉnh sửa',
    en: 'Edit',
  },
  DELETE: {
    vi: 'Xóa',
    en: 'Delete',
  },
  USER_LIST: {
    vi: 'Danh sách người dùng',
    en: 'User List',
  },
  USER_ID: {
    vi: 'ID người dùng',
    en: 'User ID',
  },
  CREATED_AT: {
    vi: 'Ngày tạo',
    en: 'Created At',
  },
  EDIT_USER: {
    vi: 'Chỉnh sửa người dùng',
    en: 'Edit User',
  },
};
</file>

<file path="src/app/components/layout/DashBoardLayout.tsx">
import { ReactNode } from 'react';
import Header from './Header';
import Footer from './Footer';

type Props = {
  children: ReactNode;
};

export default function DashBoardLayout({ children }: Props) {
  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <Header />
      <main className="flex-1 px-6 py-8">
        <div className="w-3/4 mx-auto">{children}</div>
      </main>
      <Footer />
    </div>
  );
}
</file>

<file path="src/app/components/layout/Footer.tsx">
import { useGlobalContext } from '../common/GlobalContext';
import { translate } from '../common/translate/translate';

const Footer = () => {
  const {  } = useGlobalContext();
  return (
    <footer className="bg-white text-gray-600 p-4 text-center">
      <div className="flex justify-center space-x-8 mb-4">
        <div>
          <h3 className="font-bold">{translate('APPLICATION')}</h3>
          <p className="text-gray-500">{translate('E_LEARNING')}</p>
        </div>
        <div>
          <h3 className="font-bold">{translate('LINKS')}</h3>
          <p>{translate('ABOUT_US')}</p>
          <p>{translate('BLOG')}</p>
        </div>
        <div>
          <h3 className="font-bold">{translate('SUPPORT')}</h3>
          <p>{translate('FAQ')}</p>
          <p>{translate('CONTACT')}</p>
        </div>
        <div>
          <h3 className="font-bold">{translate('SOCIAL_MEDIA')}</h3>
          <div className="flex space-x-2">
            <a
              href="https://facebook.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M22.675 0H1.325C.593 0 0 .593 0 1.325v21.351C0 23.407.593 24 1.325 24H12.82v-9.294H9.692v-3.622h3.128V8.413c0-3.1 1.893-4.788 4.659-4.788 1.325 0 2.463.099 2.795.143v3.24l-1.918.001c-1.504 0-1.795.715-1.795 1.763v2.313h3.587l-.467 3.622h-3.12V24h6.116c.732 0 1.325-.593 1.325-1.324V1.325C24 .593 23.407 0 22.675 0z" />
              </svg>
            </a>
            <a
              href="https://youtube.com"
              target="_blank"
              rel="noopener noreferrer"
            >
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 9.71 0 12 0 12s0 2.29.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 14.29 24 12 24 12s0-2.29-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />
              </svg>
            </a>
          </div>
        </div>
      </div>
      <p className="text-sm">{translate('COPYRIGHT_2025')}</p>
    </footer>
  );
};

export default Footer;
</file>

<file path="src/app/components/layout/Header.tsx">
import { Link, useNavigate } from 'react-router-dom';
import { useGlobalContext } from '../common/GlobalContext';
import { LanguageFlag, LanguageList } from '../../types/LanguageType';
import { translate } from '../common/translate/translate';
import SideBar from './SideBar';
import { UserCircle } from 'phosphor-react';

const Header = () => {
  const { language, changeLanguage, isLogin, setIsLogin } = useGlobalContext();
  const navigate = useNavigate();
  const handleLogout = () => {
    setIsLogin(false);
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('userId');
    navigate('/login');
  };

  return (
    <header className="bg-blue-900 text-white p-2 flex items-center justify-between sticky top-0 z-50 text-lg px-8">
      <div className="flex items-center space-x-4">
        {/* <Link to="/" className="flex items-center">
          <img src="./logo.png" alt="logo" width={'60px'} />
        </Link> */}
        <div>
          <SideBar />
        </div>
      </div>
      <div className="flex items-center space-x-2 text-black">
        {isLogin ? (
          <div className="dropdown dropdown-center">
            <div
              tabIndex={0}
              role="button"
              className="btn btn-ghost m-1 text-white rounded-full"
            >
              <UserCircle size={32} />
            </div>
            <ul
              tabIndex={0}
              className="dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm"
            >
              <li>
                <div className="" onClick={handleLogout}>
                  {translate('LOGOUT')}
                </div>
              </li>
            </ul>
          </div>
        ) : (
          <Link to="/login" className="btn btn-primary text-lg">
            {translate('LOGIN')}
          </Link>
        )}
        <div className="dropdown dropdown-end">
          <div tabIndex={0} role="button" className="btn btn-ghost">
            <img src={LanguageFlag[language]} width={'48px'} alt="icon" />
          </div>
          <ul
            tabIndex={0}
            className="dropdown-content menu bg-base-100 rounded-box z-[1] w-24 p-2 shadow"
          >
            {LanguageList.map((item) => (
              <li
                key={item.code}
                onClick={() => {
                  changeLanguage(item.code);
                }}
              >
                <div>
                  <img src={item.flag} width={'24px'} alt="icon" />
                  {item.code}
                </div>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </header>
  );
};

export default Header;
</file>

<file path="src/app/components/layout/Modal.tsx">
import React from 'react';

interface ModalProps {
  id: string;
  title: string;
  children: React.ReactNode;
}

const Modal = ({ id, title, children }: ModalProps) => {
  return (
    <dialog id={id} className="modal">
      <div className="modal-box w-11/12 max-w-5xl">
        <h3 className="font-bold text-xl">{title}</h3>
        <div className="py-4">{children}</div>
        <div className="modal-action"></div>
      </div>
    </dialog>
  );
};

export default Modal;
</file>

<file path="src/app/components/layout/SideBar.tsx">
import { House, List, Shield, User } from 'phosphor-react';
import { useGlobalContext } from '../common/GlobalContext';
import { Link } from 'react-router-dom';
import { translate } from '../common/translate/translate';

const SideBar = () => {
  const { language } = useGlobalContext();
  return (
    <div className="drawer">
      <input id="my-drawer" type="checkbox" className="drawer-toggle" />
      <div className="drawer-content">
        {/* Page content here */}
        <label htmlFor="my-drawer" className="btn btn-ghost drawer-button">
          <List size={42} className="pointer" />
        </label>
      </div>
      <div className="drawer-side">
        <label
          htmlFor="my-drawer"
          aria-label="close sidebar"
          className="drawer-overlay"
        ></label>
        <ul className="menu bg-base-200 text-base-content min-h-full w-80 p-4 text-lg">
          {/* Sidebar content here */}
          <li>
            <Link to="/">
              <House size={32} /> {translate('HOME')}
            </Link>
          </li>
          <li>
            <Link to="/users">
              <User size={32} /> {translate('USERS')}
            </Link>
          </li>
        </ul>
      </div>
    </div>
  );
};

export default SideBar;
</file>

<file path="src/app/components/ui/button.tsx">
import React from 'react';

export const Button = ({ children, ...props }: React.ButtonHTMLAttributes<HTMLButtonElement>) => {
  return (
    <button className="px-4 py-2 bg-blue-500 text-white rounded" {...props}>
      {children}
    </button>
  );
};
</file>

<file path="src/app/components/ui/Input.tsx">
interface InputProps {
  title: string;
  placeholder: string;
  type:
    | 'email'
    | 'password'
    | 'text'
    | 'number'
    | 'tel'
    | 'url'
    | 'search'
    | 'date'
    | 'datetime-local'
    | 'month'
    | 'week'
    | 'time'
    | 'color'
    | 'file'
    | 'hidden'
    | 'image'
    | 'range'
    | 'checkbox'
    | 'radio'
    | 'button'
    | 'submit'
    | 'reset';
  name: string;
  value?: string | number;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
  error?: string;
  required?: boolean;
  disabled?: boolean;
  className?: string;
}

const Input = ({
  title,
  placeholder,
  type,
  name,
  value,
  onChange,
  error,
  required = false,
  disabled = false,
  className = '',
}: InputProps) => {
  return (
    <div className="form-control">
      <label className="label">
        <span className="label-text">{title}</span>
      </label>
      <input
        type={type}
        name={name}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        className={`input input-bordered w-full ${
          error ? 'input-error' : ''
        } ${className}`}
        required={required}
        disabled={disabled}
      />
      {error && <span className="text-error text-sm mt-1">{error}</span>}
    </div>
  );
};

export default Input;
</file>

<file path="src/app/pages/course/api.ts">
// import axios from 'axios';

// const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/api';

// export async function createCourseAPI(course: any) {
//   try {
//     const formData = new FormData();
    
//     // Append all course data
//     Object.keys(course).forEach(key => {
//       if (key !== 'image' && key !== 'lessons') {
//         formData.append(key, course[key]);
//       }
//     });

//     // Append image if it's a File
//     if (course.image instanceof File) {
//       formData.append('image', course.image);
//     }

//     // Append lessons
//     formData.append('lessons', JSON.stringify(course.lessons));

//     const res = await axios.post(`${API_BASE_URL}/courses`, formData, {
//       headers: { 
//         'Authorization': `Bearer ${localStorage.getItem('token')}`,
//         'Content-Type': 'multipart/form-data'
//       },
//     });
//     return res.data;
//   } catch (e) {
//     console.error('Error creating course:', e);
//     throw new Error('Lỗi tạo khóa học');
//   }
// }

// export async function createLessonAPI(lesson: any) {
//   try {
//     const formData = new FormData();
//     formData.append('title', lesson.title);
//     formData.append('content', lesson.content);
//     formData.append('courseId', lesson.courseId);
    
//     if (lesson.videoUrl instanceof File) {
//       formData.append('video', lesson.videoUrl);
//     }

//     const res = await axios.post(`${API_BASE_URL}/lessons`, formData, {
//       headers: { 
//         'Authorization': `Bearer ${localStorage.getItem('token')}`,
//         'Content-Type': 'multipart/form-data'
//       },
//     });
//     return res.data;
//   } catch (e) {
//     console.error('Error creating lesson:', e);
//     throw new Error('Lỗi tạo bài học');
//   }
export async function createCourseAPI(course: any) {
  console.log('Mock creating course:', course);
  // Giả lập phản hồi từ server
  return {
    success: true,
    data: {
      id: Math.floor(Math.random() * 1000), // ID ngẫu nhiên
      ...course,
      createdAt: new Date().toISOString(),
    },
  };
}

export async function createLessonAPI(lesson: any) {
  console.log('Mock creating lesson:', lesson);
  // Giả lập phản hồi từ server
  return {
    success: true,
    data: {
      id: Math.floor(Math.random() * 1000), // ID ngẫu nhiên
      ...lesson,
      createdAt: new Date().toISOString(),
    },
  };
}
// }
</file>

<file path="src/app/pages/course/CourseForm.tsx">
import { useState, useEffect, useRef } from 'react';
import { Plus, BookOpen, Money, List, FileText, FloppyDisk, Upload, X } from 'phosphor-react';
import { Course, Lesson } from './types';
interface CourseFormProps {
  course: Course;
  onCourseChange: (course: Course) => void;
  onAddLessonClick: () => void;
}

export default function CourseForm({
  course,
  onCourseChange,
  onAddLessonClick,
}: CourseFormProps) {
  const [localCourse, setLocalCourse] = useState(course);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    return () => {
      if (imagePreview) URL.revokeObjectURL(imagePreview);
    };
  }, [imagePreview]);

  const handleChange = (field: keyof Course, value: any) => {
    setLocalCourse((prev) => ({ ...prev, [field]: value }));
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Create preview URL
      const previewUrl = URL.createObjectURL(file);
      setImagePreview(previewUrl);
      
      // You would typically upload the file to your server here
      // and then set the returned URL to localCourse.image
      // For now, we'll just store the file object
      handleChange('image', file);
    }
  };

  const removeImage = () => {
    setImagePreview(null);
    handleChange('image', '');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    try {
      // Here you would actually upload the files to your server
      // and get the URLs before saving the course
      await new Promise(resolve => setTimeout(resolve, 800)); // Simulate API call
      onCourseChange(localCourse);
      console.log('Submit course data:', localCourse);
      alert('✅ Thông tin khóa học đã được lưu thành công');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white rounded-xl shadow-lg border border-gray-100">
      <h1 className="text-3xl font-bold mb-6 text-gray-800 flex items-center gap-2">
        <BookOpen className="text-indigo-600" size={28} />
        {course.title ? course.title : 'Tạo khóa học mới'}
      </h1>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-5">
          {/* Course Title */}
          <div className="relative">
            <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
              Tên khóa học <span className="text-red-500">*</span>
            </label>
            <div className="relative">
              <input
                id="title"
                type="text"
                placeholder="Nhập tên khóa học"
                value={localCourse.title}
                onChange={(e) => handleChange('title', e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                required
              />
              <BookOpen className="absolute left-3 top-3.5 text-gray-400" size={18} />
            </div>
          </div>

          {/* Course Description */}
          <div>
            <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
              Mô tả khóa học
            </label>
            <div className="relative">
              <textarea
                id="description"
                placeholder="Mô tả chi tiết về khóa học..."
                value={localCourse.description}
                onChange={(e) => handleChange('description', e.target.value)}
                rows={4}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
              />
              <FileText className="absolute left-3 top-3.5 text-gray-400" size={18} />
            </div>
          </div>

          {/* Image Upload */}
          <div>
            <label htmlFor="image" className="block text-sm font-medium text-gray-700 mb-1">
              Ảnh đại diện
            </label>
            <div className="space-y-3">
              {imagePreview ? (
                <div className="relative">
                  <img 
                    src={imagePreview} 
                    alt="Course preview" 
                    className="w-full h-48 object-cover rounded-lg border border-gray-200"
                  />
                  <button
                    type="button"
                    onClick={removeImage}
                    className="absolute top-2 right-2 bg-red-500 text-white p-1 rounded-full hover:bg-red-600 transition"
                  >
                    <X size={16} />
                  </button>
                </div>
              ) : (
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-indigo-400 transition">
                  <div className="flex flex-col items-center justify-center gap-2">
                    <Upload className="text-gray-400" size={24} />
                    <p className="text-sm text-gray-500">Kéo thả ảnh vào đây hoặc click để chọn</p>
                    <input
                      id="image"
                      type="file"
                      ref={fileInputRef}
                      onChange={handleImageUpload}
                      accept="image/*"
                      className="hidden"
                    />
                    <button
                      type="button"
                      onClick={() => fileInputRef.current?.click()}
                      className="mt-2 bg-indigo-50 text-indigo-600 hover:bg-indigo-100 px-4 py-2 rounded-md text-sm font-medium transition"
                    >
                      Chọn ảnh
                    </button>
                  </div>
                </div>
              )}
              <p className="text-xs text-gray-500">Định dạng hỗ trợ: JPG, PNG, GIF. Kích thước tối đa: 5MB</p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
            {/* Price */}
            <div className="relative">
              <label htmlFor="price" className="block text-sm font-medium text-gray-700 mb-1">
                Giá khóa học (VND)
              </label>
              <div className="relative">
                <input
                  id="price"
                  type="number"
                  placeholder="0"
                  value={localCourse.price || ''}
                  onChange={(e) => handleChange('price', parseFloat(e.target.value) || 0)}
                  className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                />
                <Money className="absolute left-3 top-3.5 text-gray-400" size={18} />
              </div>
            </div>

            {/* Category */}
            <div className="relative">
              <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
                Danh mục
              </label>
              <div className="relative">
                <input
                  id="category"
                  type="text"
                  placeholder="Ví dụ: Lập trình, Thiết kế..."
                  value={localCourse.category}
                  onChange={(e) => handleChange('category', e.target.value)}
                  className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                />
                <List className="absolute left-3 top-3.5 text-gray-400" size={18} />
              </div>
            </div>
          </div>
        </div>

        <div className="flex flex-col sm:flex-row gap-3 pt-2">
          <button
            type="submit"
            disabled={isSubmitting}
            className="flex-1 bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-2 disabled:opacity-70"
          >
            <FloppyDisk size={18} />
            {isSubmitting ? 'Đang lưu...' : 'Lưu khóa học'}
          </button>

          <button
            type="button"
            onClick={onAddLessonClick}
            className="flex-1 bg-emerald-600 hover:bg-emerald-700 text-white font-medium py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-2"
          >
            <Plus size={18} />
            Thêm bài học
          </button>
        </div>
      </form>

      {localCourse.lessons.length > 0 && (
        <div className="mt-8 border-t pt-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
            <List size={20} />
            Danh sách bài học ({localCourse.lessons.length})
          </h3>
          <ul className="space-y-2">
            {localCourse.lessons.map((lesson, idx) => (
              <li key={idx} className="bg-gray-50 hover:bg-gray-100 p-3 rounded-lg border border-gray-200 transition">
                <div className="flex items-center gap-3">
                  <span className="bg-indigo-100 text-indigo-800 w-6 h-6 rounded-full flex items-center justify-center text-sm font-medium">
                    {idx + 1}
                  </span>
                  <span className="font-medium text-gray-800">{lesson.title}</span>
                </div>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );}
</file>

<file path="src/app/pages/course/create_course.tsx">
'use client';
import { useState, useEffect } from 'react';
import CourseForm from './CourseForm';
import { LessonForm } from './LessonForm';
import { Course, Lesson } from './types';
import { createCourseAPI } from './api';

export default function CreateCoursePage() {
  const [course, setCourse] = useState<Course>({
    title: '',
    description: '',
    image: null,
    price: 0,
    category: '',
    teacherId: 1,
    lessons: [],
  });
  const [lessons, setLessons] = useState<Lesson[]>([]);
  const [showLessonForm, setShowLessonForm] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleCourseChange = (updatedCourse: Course) => {
    setCourse(updatedCourse);
  };

  const handleAddLesson = (lesson: Lesson) => {
    setLessons((prev) => [...prev, lesson]);
    setShowLessonForm(false);
  };

  const handleBackFromLesson = () => {
    if (showLessonForm) {
      const confirmBack = window.confirm('⚠️ Thông tin bài học chưa được lưu, bạn có chắc muốn quay lại?');
      if (confirmBack) {
        setShowLessonForm(false);
      }
    }
  };

  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (course.title || lessons.length > 0) {
        e.preventDefault();
        e.returnValue = 'Bạn có chắc muốn rời đi? Thông tin khóa học chưa được lưu sẽ bị mất.';
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, [course, lessons]);

  const handleSubmitCourse = async () => {
    if (!course.title) {
      alert('Vui lòng nhập tên khóa học');
      return;
    }

    setIsSubmitting(true);
    try {
      // Upload image if exists
      let imageUrl = '';
      if (course.image instanceof File) {
        imageUrl = await uploadFile(course.image);
      }

      // Prepare course data
      const courseData = {
        ...course,
        image: imageUrl,
        lessons: lessons.map((lesson) => ({
          ...lesson,
          // Remove file object before sending
          file: undefined,
        })),
      };

      // Submit to API
      const result = await createCourseAPI(courseData);

      if (result.success) {
        alert('✅ Khóa học đã được tạo thành công!');
        // Reset form
        setCourse({
          title: '',
          description: '',
          image: null,
          price: 0,
          category: '',
          teacherId: 1,
          lessons: [],
        });
        setLessons([]);
      } else {
        throw new Error('Failed to create course');
      }
    } catch (error) {
      console.error('Error creating course:', error);
      alert('❌ Có lỗi xảy ra khi tạo khóa học');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-10 bg-white shadow-2xl rounded-2xl">
      <h1 className="text-3xl font-bold text-gray-800">Tạo Khóa Học Mới</h1>

      {!showLessonForm ? (
        <>
          <CourseForm
            course={{ ...course, lessons }}
            onCourseChange={handleCourseChange}
            onAddLessonClick={() => setShowLessonForm(true)}
          />

          <div className="flex justify-end gap-4 pt-4">
            <button
              onClick={handleSubmitCourse}
              disabled={isSubmitting || !course.title}
              className={`px-6 py-3 rounded-lg font-medium shadow-md transition-all ${
                isSubmitting || !course.title
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-indigo-600 hover:bg-indigo-700 text-white'
              }`}
            >
              {isSubmitting ? 'Đang tạo khóa học...' : 'Tạo Khóa Học'}
            </button>
          </div>
        </>
      ) : (
        <LessonForm onBack={handleBackFromLesson} onSubmit={handleAddLesson} />
      )}
    </div>
  );
}

// export const uploadFile = async (file: File): Promise<string> => {
//   try {
//     const formData = new FormData();
//     formData.append('file', file);

//     const response = await fetch('/api/upload', {
//       method: 'POST',
//       body: formData,
//     });

//     if (!response.ok) {
//       throw new Error(`Upload failed with status ${response.status}`);
//     }

//     const data = await response.json();
//     if (!data.url) {
//       throw new Error('No URL returned from server');
//     }

//     return data.url;
//   } catch (error) {
//     console.error('Upload error:', error);
//     throw new Error('Không thể tải lên tệp. Vui lòng thử lại.');
//   }
// };
export const uploadFile = async (file: File): Promise<string> => {
  console.log('Uploading file:', file.name);
  return 'https://example.com/mock-uploaded-file.jpg';
};
</file>

<file path="src/app/pages/course/LessonForm.tsx">
import React, { useState, useRef } from 'react';
import { Plus, ArrowLeft, BookOpen, FileText, FloppyDisk , X } from 'phosphor-react';
import { Lesson } from './types';
interface LessonFormProps {
  onBack: () => void;
  onSubmit: (lesson: Lesson) => void;
}

export function LessonForm({ onBack, onSubmit }: LessonFormProps) {
  const [title, setTitle] = useState('');
  const [videoFile, setVideoFile] = useState<File | null>(null);
  const [videoPreview, setVideoPreview] = useState<string | null>(null);
  const [content, setContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const videoInputRef = useRef<HTMLInputElement>(null);

  const handleVideoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setVideoFile(file);
      
      // Create preview for video (shows first frame if possible)
      const previewUrl = URL.createObjectURL(file);
      setVideoPreview(previewUrl);
    }
  };

  const removeVideo = () => {
    setVideoFile(null);
    setVideoPreview(null);
    if (videoInputRef.current) {
      videoInputRef.current.value = '';
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    try {
      // Here you would upload the video file to your server
      // and get the URL before saving the lesson
      await new Promise(resolve => setTimeout(resolve, 800)); // Simulate API call
      
      // For now, we'll just pass the file object
      // In a real app, you'd pass the URL returned from your server
      onSubmit({ 
        title, 
        videoUrl: videoFile ? URL.createObjectURL(videoFile) : '', 
        content 
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleBack = () => {
    if (title || videoFile || content) {
      const confirmBack = window.confirm('⚠️ Thông tin bài học chưa được lưu, bạn có chắc muốn quay lại?');
      if (!confirmBack) return;
    }
    onBack();
  };

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white rounded-xl shadow-lg border border-gray-100">
      <button 
        onClick={handleBack} 
        className="text-indigo-600 hover:text-indigo-800 font-medium mb-4 flex items-center gap-1 transition"
      >
        <ArrowLeft size={18} />
        Quay lại
      </button>
      
      <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-2">
        <Plus className="text-emerald-600" size={24} />
        Thêm bài học mới
      </h2>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-5">
          {/* Lesson Title */}
          <div className="relative">
            <label htmlFor="lessonTitle" className="block text-sm font-medium text-gray-700 mb-1">
              Tiêu đề bài học <span className="text-red-500">*</span>
            </label>
            <div className="relative">
              <input
                id="lessonTitle"
                type="text"
                placeholder="Nhập tiêu đề bài học"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                required
              />
              <BookOpen className="absolute left-3 top-3.5 text-gray-400" size={18} />
            </div>
          </div>

          {/* Video Upload */}
          <div>
            <label htmlFor="video" className="block text-sm font-medium text-gray-700 mb-1">
              Video bài giảng
            </label>
            <div className="space-y-3">
              {videoPreview ? (
                <div className="relative">
                  <div className="w-full h-48 sm:h-64 md:h-80 bg-black rounded-lg flex items-center justify-center">
                    <video src={videoPreview} controls className="max-h-full max-w-full" />
                  </div>
                  <button
                    type="button"
                    onClick={removeVideo}
                    className="absolute top-2 right-2 bg-red-500 text-white p-1 rounded-full hover:bg-red-600 transition"
                  >
                    <X size={16} />
                  </button>
                </div>
              ) : (
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-indigo-400 transition">
                    <div className="flex flex-col items-center justify-center gap-2">
                    <video className="text-gray-400" width={48} height={48} />
                    <p className="text-sm text-gray-500">Kéo thả video vào đây hoặc click để chọn</p>
                    <input
                      id="video"
                      type="file"
                      ref={videoInputRef}
                      onChange={handleVideoUpload}
                      accept="video/mp4,video/mov,video/avi"
                      className="hidden"
                    />
                    <button
                      type="button"
                      onClick={() => videoInputRef.current?.click()}
                      className="mt-2 bg-indigo-50 text-indigo-600 hover:bg-indigo-100 px-4 py-2 rounded-md text-sm font-medium transition"
                    >
                      Chọn video
                    </button>
                    </div>
                </div>
              )}
              <p className="text-xs text-gray-500">Định dạng hỗ trợ: MP4, MOV, AVI. Kích thước tối đa: 100MB</p>
            </div>
          </div>

          {/* Lesson Content */}
          <div>
            <label htmlFor="lessonContent" className="block text-sm font-medium text-gray-700 mb-1">
              Nội dung bài học
            </label>
            <div className="relative">
              <textarea
                id="lessonContent"
                placeholder="Nội dung chi tiết bài học..."
                value={content}
                onChange={(e) => setContent(e.target.value)}
                rows={6}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
              />
              <FileText className="absolute left-3 top-3.5 text-gray-400" size={18} />
            </div>
          </div>
        </div>

        <button
          type="submit"
          disabled={isSubmitting}
          className="w-full bg-emerald-600 hover:bg-emerald-700 text-white font-medium py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-2 disabled:opacity-70"
        >
          <FloppyDisk  size={18} />
          {isSubmitting ? 'Đang lưu...' : 'Lưu bài học'}
        </button>
      </form>
    </div>
  );}
</file>

<file path="src/app/pages/course/LessonList.tsx">
import { Lesson } from './types';

export function LessonList({ lessons }: { lessons: Lesson[] }) {
  return (
    <div className="mt-6">
      <h3 className="text-lg font-medium mb-2">Danh sách bài học đã thêm</h3>
      <ul className="list-disc pl-6 space-y-1">
        {lessons.map((l, idx) => <li key={idx}>{l.title}</li>)}
      </ul>
    </div>
  );
}
</file>

<file path="src/app/pages/course/types.ts">
export interface Lesson {
  title: string;
  videoUrl: string | File; 
  content: string;
  file?: File;
}

export interface Course {
  title: string;
  description: string;
  image: string | File | null; 
  price: number;
  category: string;
  teacherId: number;
  lessons: Lesson[];
}
</file>

<file path="src/app/pages/dashboard/DashBoard.tsx">
import { useNavigate } from 'react-router-dom';

const actions = [
  {
    iconSrc: '/icons/icon_book.png',
    title: 'Tạo khóa học',
    description: 'Bắt đầu một khóa học mới.',
    href: '/course/create_course',
    bgColor: 'bg-gradient-to-br from-blue-100 to-blue-200',
  },
  {
    iconSrc: '/icons/icon_edit.png',
    title: 'Quản lý khóa học',
    description: 'Chỉnh sửa nội dung khóa học.',
    href: '/dashboard/my-courses',
    bgColor: 'bg-gradient-to-br from-green-100 to-green-200',
  },
  {
    iconSrc: '/icons/fileText.png',
    title: 'Giao bài tập',
    description: 'Tạo bài tập cho học viên.',
    href: '/dashboard/assignments',
    bgColor: 'bg-gradient-to-br from-yellow-100 to-yellow-200',
  },
  {
    iconSrc: '/icons/clipboardCheck.png',
    title: 'Chấm điểm',
    description: 'Xem bài nộp và chấm điểm.',
    href: '/dashboard/grading',
    bgColor: 'bg-gradient-to-br from-purple-100 to-purple-200',
  },
];

export default function DashBoard() {
  const navigate = useNavigate();

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
      {actions.map((action, index) => (
        <div
          key={index}
          onClick={() => navigate(action.href)}
          className={`cursor-pointer ${action.bgColor} rounded-2xl p-6 h-[240px] w-full flex flex-col justify-between shadow-md hover:shadow-xl transition duration-300 transform hover:-translate-y-1`}
        >
          <div className="flex flex-col items-center">
            <div className="w-20 h-20 rounded-full flex items-center justify-center bg-white shadow mb-4">
              <img src={action.iconSrc} alt={action.title} className="w-14 h-14 object-contain" />
            </div>
            <h2 className="text-4xl font-semibold text-gray-800 text-center">{action.title}</h2>
            <p className="text-base text-gray-600 text-center">{action.description}</p>
          </div>
        </div>
      ))}
    </div>
  );
}
</file>

<file path="src/app/pages/grade-assignment/GradeAssignment.tsx">
import { useState, useEffect } from 'react';
import { Link, useNavigate, useParams } from 'react-router-dom';
import { useGlobalContext } from '../../components/common/GlobalContext';
import { translate } from '../../components/common/translate/translate';

interface Submission {
  id: string;
  studentId: string;
  studentName: string;
  content: string | { fileName: string; type: string; url?: string };
  submissionDate: string;
  grade: number | null;
  feedback: string | null;
  status: 'Pending' | 'Graded';
}

interface Assignment {
  id: string;
  title: string;
  deadline: string;
  submissions: Submission[];
}

const sampleAssignment: Assignment = {
  id: '456',
  title: 'Sample Assignment for Grading',
  deadline: '2025-05-23T23:59:59+07:00',
  submissions: [
    {
      id: 'sub1',
      studentId: 'stu1',
      studentName: 'Nguyen Van A',
      content: 'The largest mammal is the Blue Whale.',
      submissionDate: '2025-05-22T14:30:00+07:00',
      grade: null,
      feedback: null,
      status: 'Pending',
    },
    {
      id: 'sub2',
      studentId: 'stu2',
      studentName: 'Tran Thi B',
      content: {
        fileName: 'essay.docx',
        type: 'docx',
        url: 'http://fakeurl.com/essay.docx',
      },
      submissionDate: '2025-05-22T15:00:00+07:00',
      grade: null,
      feedback: null,
      status: 'Pending',
    },
    {
      id: 'sub3',
      studentId: 'stu3',
      studentName: 'Le Van C',
      content: 'Water is essential because it supports life processes.',
      submissionDate: '2025-05-22T16:00:00+07:00',
      grade: null,
      feedback: null,
      status: 'Pending',
    },
  ],
};

const GradeAssignment = () => {
  const { language } = useGlobalContext();
  const navigate = useNavigate();
  const { assignmentId } = useParams<{ assignmentId: string }>();
  const [assignment, setAssignment] = useState<Assignment | null>(
    sampleAssignment
  );
  const [selectedSubmission, setSelectedSubmission] =
    useState<Submission | null>(null);
  const [gradeInput, setGradeInput] = useState<string>('');
  const [feedbackInput, setFeedbackInput] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  // useEffect(() => {
  //   const token = localStorage.getItem('accessToken');
  //   if (!token) {
  //     setError(
  //       translate('SESSION_EXPIRED') || 'Session expired, please log in again.'
  //     );
  //     navigate('/login');
  //     return;
  //   }

  //   const now = new Date(); // 11:04 AM +07, 23/05/2025
  //   const deadline = new Date(sampleAssignment.deadline); // 23/05/2025 23:59:59 +07
  //   if (now > deadline) {
  //     setError(
  //       translate('DEADLINE_LOCKED') || 'Cannot grade, assignment is locked.'
  //     );
  //     return;
  //   }

  //   const isInstructor = true;
  //   if (!isInstructor) {
  //     setError(
  //       translate('NO_PERMISSION') ||
  //         'You do not have permission to grade this.'
  //     );
  //     return;
  //   }

  //   // Kiểm tra assignmentId từ URL (chuẩn bị cho tích hợp API)
  //   if (assignmentId && assignmentId !== sampleAssignment.id) {
  //     setError(translate('LOAD_ERROR') || 'Failed to load assignment.');
  //     return;
  //   }

  //   setAssignment(sampleAssignment);
  // }, [navigate, assignmentId]);

  const handleGradeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setGradeInput(e.target.value);
  };

  const handleFeedbackChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setFeedbackInput(e.target.value);
  };

  const handleSaveGrade = () => {
    if (!selectedSubmission) return;

    const gradeValue = parseFloat(gradeInput);
    if (isNaN(gradeValue) || gradeValue < 0 || gradeValue > 10) {
      setError(
        translate('INVALID_GRADE') ||
          'Score must be a valid number between 0 and 10.'
      );
      return;
    }

    const updatedSubmissions = assignment?.submissions.map((sub) =>
      sub.id === selectedSubmission.id
        ? {
            ...sub,
            grade: gradeValue,
            feedback: feedbackInput,
            status: 'Graded',
          }
        : sub
    );
    setAssignment({ ...assignment!, submissions: updatedSubmissions! });
    setSelectedSubmission({
      ...selectedSubmission,
      grade: gradeValue,
      feedback: feedbackInput,
      status: 'Graded',
    });
    setSuccess(translate('GRADE_SUCCESS') || 'Grading successful.');
    setError(null);
    setGradeInput('');
    setFeedbackInput('');

    console.log(
      `Notification sent to student ${selectedSubmission.studentId}: "Bài tập đã được chấm điểm"`
    );
  };

  const handleSelectSubmission = (submission: Submission) => {
    setSelectedSubmission(submission);
    setGradeInput(submission.grade?.toString() || '');
    setFeedbackInput(submission.feedback || '');
    setError(null);
    setSuccess(null);
  };

  const handleDownloadFile = (fileUrl?: string) => {
    if (fileUrl) {
      window.open(fileUrl, '_blank');
    } else {
      setError(translate('FILE_NOT_AVAILABLE') || 'File not available.');
    }
  };

  if (error) return <div className="alert alert-error m-4">{error}</div>;
  if (!assignment)
    return (
      <div className="text-center m-4">
        {translate('LOADING') || 'Loading...'}
      </div>
    );

  return (
    <div className="min-h-screen" data-theme="light">
      <div className="bg-primary p-6">
        <div className="container mx-auto">
          <h1 className="text-xl font-bold text-base-100 mb-4">
            {assignment.title}
          </h1>
          <div className="flex flex-col md:flex-row gap-6">
            <div className="card w-full md:w-1/3 bg-base-200 shadow-xl">
              <div className="card-body">
                <h3 className="card-title">
                  {translate('SUBMISSIONS_LIST') || 'Submissions List'}
                </h3>
                {assignment.submissions.length === 0 ? (
                  <p>
                    {translate('NO_SUBMISSIONS') || 'No submissions available.'}
                  </p>
                ) : (
                  assignment.submissions.map((sub) => (
                    <div
                      key={sub.id}
                      className="p-2 border-b cursor-pointer hover:bg-base-300"
                      onClick={() => handleSelectSubmission(sub)}
                    >
                      {sub.studentName} -{' '}
                      {new Date(sub.submissionDate).toLocaleString()} (
                      {sub.status})
                    </div>
                  ))
                )}
              </div>
            </div>
            <div className="card w-full md:w-2/3 bg-base-200 shadow-xl">
              <div className="card-body">
                {selectedSubmission ? (
                  <>
                    <h3 className="card-title">
                      {translate('SUBMISSION_DETAIL') || 'Submission Detail'}
                    </h3>
                    <p>
                      <strong>{translate('STUDENT_NAME') || 'Student:'}</strong>{' '}
                      {selectedSubmission.studentName}
                    </p>
                    <p>
                      <strong>{translate('SUBMISSION_DATE') || 'Date:'}</strong>{' '}
                      {new Date(
                        selectedSubmission.submissionDate
                      ).toLocaleString()}
                    </p>
                    <p>
                      <strong>{translate('CONTENT') || 'Content:'}</strong>
                    </p>
                    {typeof selectedSubmission.content === 'string' ? (
                      <p className="mt-2">{selectedSubmission.content}</p>
                    ) : (
                      <div className="mt-2">
                        <p>
                          {translate('ATTACHED_FILE') || 'Attached File:'}{' '}
                          {selectedSubmission.content.fileName} (
                          {selectedSubmission.content.type})
                        </p>
                        <button
                          onClick={() =>
                            handleDownloadFile(selectedSubmission.content.url)
                          }
                          className="btn btn-sm btn-outline mt-2"
                        >
                          {translate('DOWNLOAD_FILE') || 'Download File'}
                        </button>
                      </div>
                    )}
                    <div className="mt-4">
                      <label className="label">
                        <span className="label-text">
                          {translate('ENTER_GRADE') || 'Enter Grade (0-10):'}
                        </span>
                      </label>
                      <input
                        type="text"
                        value={gradeInput}
                        onChange={handleGradeChange}
                        className="input input-bordered w-full max-w-xs"
                        placeholder="0-10"
                        disabled={selectedSubmission.status === 'Graded'}
                      />
                    </div>
                    <div className="mt-4">
                      <label className="label">
                        <span className="label-text">
                          {translate('FEEDBACK') || 'Feedback (Optional):'}
                        </span>
                      </label>
                      <textarea
                        value={feedbackInput}
                        onChange={handleFeedbackChange}
                        className="textarea textarea-bordered w-full"
                        rows={3}
                        placeholder={
                          translate('ENTER_FEEDBACK') ||
                          'Enter feedback here...'
                        }
                        disabled={selectedSubmission.status === 'Graded'}
                      />
                    </div>
                    <button
                      onClick={handleSaveGrade}
                      className="btn btn-primary mt-4"
                      disabled={selectedSubmission.status === 'Graded'}
                    >
                      {translate('SAVE_GRADE') || 'Save Grade'}
                    </button>
                    {selectedSubmission.status === 'Graded' && (
                      <div className="mt-4">
                        <p>
                          <strong>
                            {translate('GRADED_STATUS') || 'Status:'}
                          </strong>{' '}
                          {translate('GRADED') || 'Graded'}
                        </p>
                        <p>
                          <strong>{translate('SCORE') || 'Score:'}</strong>{' '}
                          {selectedSubmission.grade}/10
                        </p>
                        {selectedSubmission.feedback && (
                          <p>
                            <strong>
                              {translate('FEEDBACK') || 'Feedback:'}
                            </strong>{' '}
                            {selectedSubmission.feedback}
                          </p>
                        )}
                      </div>
                    )}
                    {success && (
                      <div className="alert alert-success mt-2">{success}</div>
                    )}
                    {error && (
                      <div className="alert alert-error mt-2">{error}</div>
                    )}
                  </>
                ) : (
                  <p>
                    {translate('SELECT_SUBMISSION') ||
                      'Please select a submission to grade.'}
                  </p>
                )}
              </div>
            </div>
          </div>
          <div className="mt-6">
            <Link to="/my-courses" className="btn btn-outline btn-neutral">
              {translate('BACK_TO_COURSES') || 'Back to Courses'}
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GradeAssignment;
</file>

<file path="src/app/pages/login/ForgotPassword.tsx">
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft, Envelope, SpinnerGap  } from 'phosphor-react';

const ForgotPassword = () => {
  const [email, setEmail] = useState<string>('');
  const [isSent, setIsSent] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const navigate = useNavigate();

  const handleSendOtp = async () => {
    if (!email) {
      setError('Vui lòng nhập email');
      return;
    }

  try {
      setIsSent(true);
      setError('');
      // Giả lập gửi OTP
      await new Promise((resolve) => setTimeout(resolve, 1500));
      setIsSent(true);
      navigate('/verify-otp', { state: { email } });
    } catch (err) {
      setError('Email không tồn tại trong hệ thống.');
      setIsSent(false);
    }
  };

  const handleBackToLogin = () => {
    navigate('/login');
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-100 via-purple-100 to-blue-200 px-4">
      <div className="bg-white p-8 rounded-2xl shadow-xl w-full max-w-md border border-gray-100">
        {/* Logo */}
        <div className="flex flex-col items-center mb-6">
          <img
            src="../../../../public/logo.png"
            alt="E-Learning Logo"
            className="h-28 mb-2"
          />
          <h1 className="text-2xl font-semibold text-gray-700">Quên mật khẩu</h1>
        </div>

        <p className="text-center text-gray-600 mb-6 text-sm">
          Nhập email để nhận mã xác nhận
        </p>

        {/* Form */}
        <div className="space-y-5">
          <div className="relative">
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <div className="relative">
              <input
                id="email"
                type="email"
                placeholder="Nhập email đã đăng ký"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition bg-gray-50"
                disabled={isSent}
              />
              <Envelope className="absolute left-3 top-3.5 text-gray-400" size={18} />
            </div>
          </div>

          {/* Thông báo lỗi hoặc thành công */}
          {error && <p className="text-red-500 text-sm text-center">{error}</p>}
          {isSent && !error && (
            <p className="text-green-600 text-sm text-center">
              Mã xác nhận đã được gửi đến {email}
            </p>
          )}

          {/* Nút Gửi mã xác nhận */}
          <button
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-2 disabled:opacity-70"
            onClick={handleSendOtp}
            disabled={isSent}
          >
            {isSent ? (
              <>
                <SpinnerGap  className="animate-spin" size={18} />
                Đang gửi...
              </>
            ) : (
              'Gửi mã xác nhận'
            )}
          </button>

          {/* Nút Quay lại đăng nhập */}
          <button
            type="button"
            onClick={handleBackToLogin}
            className="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-3 rounded-lg transition-all duration-200 flex items-center justify-center gap-2"
          >
            <ArrowLeft size={18} />
          </button>
        </div>
      </div>
    </div>
  );
};export default ForgotPassword;
</file>

<file path="src/app/pages/login/Login.tsx">
import { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Eye, EyeSlash } from 'phosphor-react';
import { login } from '../../components/common/apis/auth';
import { useGlobalContext } from '../../components/common/GlobalContext';
const Login = () => {
  const { isLogin, setIsLogin } = useGlobalContext();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const navigate = useNavigate();

  const handleLogin = async () => {
    if (!email || !password) {
      alert('Vui lòng nhập tên đăng nhập và mật khẩu');
      return;
    }
    try {
      const data = await login(email, password);
      if (data) {
        setIsLogin(true);
        localStorage.setItem('accessToken', data.accessToken);
        localStorage.setItem('refreshToken', data.refreshToken);
        localStorage.setItem('userId', data.userId);

        navigate('/');
      }
    } catch (error: any) {
      alert(error.message);
    }
  };

  useEffect(() => {
    if (isLogin) {
      navigate('/');
    }
  }, [isLogin, navigate]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-xl">
        {/* Logo */}
        <div className="flex flex-col items-center mb-6">
          <img
            src="../../../../public/logo.png"
            alt="E-Learning Logo"
            className="h-28 mb-2"
          />
          <h1 className="text-2xl font-semibold text-gray-700">Đăng nhập</h1>
        </div>

        {/* Form */}
        <div className="space-y-4">
          <input
            type="text"
            placeholder="Email hoặc tên đăng nhập"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="input input-bordered w-full rounded-lg border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <div className="relative">
            <input
              type={showPassword ? 'text' : 'password'}
              placeholder="Mật khẩu"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="input input-bordered w-full rounded-lg border border-gray-300 px-4 py-2 pr-10 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <span
              className="absolute inset-y-0 right-3 flex items-center cursor-pointer text-gray-500"
              onClick={() => setShowPassword(!showPassword)}
            >
              {showPassword ? <EyeSlash size={20} /> : <Eye size={20} />}
            </span>
          </div>

          <div className="flex justify-end">
            <Link
              to="/forgot-password"
              className="text-sm text-blue-600 hover:underline"
            >
              Quên mật khẩu?
            </Link>
          </div>

          <button
            onClick={handleLogin}
            className="bg-green-500 hover:bg-green-600 text-white w-full py-2 rounded-full font-semibold transition duration-200"
          >
            Đăng nhập
          </button>
        </div>

        {/* Divider */}
        <div className="text-center my-4 text-gray-400">
          Hoặc đăng nhập bằng
        </div>

        {/* Social login */}
        <div className="flex flex-col md:flex-row gap-4 justify-center">
          <button className="btn btn-outline w-full md:w-[240px] flex items-center justify-center gap-2">
            <img
              src="../../../../public/icons/ic_google.png"
              alt="Google"
              className="w-8 h-8"
            />
            <span>Đăng nhập với Google</span>
          </button>
          <button className="btn btn-outline w-full md:w-[240px] flex items-center justify-center gap-2">
            <img
              src="../../../../public/icons/ic_fb.png"
              alt="Facebook"
              className="w-8 h-8"
            />
            <span>Đăng nhập với Facebook</span>
          </button>
        </div>

        {/* Register */}
        <div className="text-center text-sm text-gray-500 mt-6">
          Chưa có tài khoản?{' '}
          <Link to="/register" className="text-blue-600 hover:underline">
            Đăng ký ngay
          </Link>
        </div>
      </div>
    </div>
  );
};

export default Login;
</file>

<file path="src/app/pages/user-management/AddUserModal.tsx">
import { translate } from '../../components/common/translate/translate';
import Modal from '../../components/layout/Modal';
import Input from '../../components/ui/Input';

const AddUserModal = ({ id }) => {
  return (
    <Modal title={translate('ADD_USER')} id={id}>
      <form method="dialog" className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Email */}
          <Input
            key="email"
            title={'Email'}
            placeholder={translate('ENTER_EMAIL')}
            type="email"
            name="email"
          />
          {/* Tên người dùng */}
          <Input
            key="name"
            title={translate('USER_NAME')}
            placeholder={translate('ENTER_USER_NAME')}
            type="text"
            name="name"
          />
          {/* Mật khẩu */}
          <Input
            key="password"
            title={translate('PASSWORD')}
            placeholder={translate('ENTER_PASSWORD')}
            type="password"
            name="password"
          />
          {/* Ngày sinh */}
          <Input
            key="dob"
            title={translate('DATE_OF_BIRTH')}
            placeholder={translate('DATE_OF_BIRTH')}
            type="date"
            name="dob"
          />
          {/* Số điện thoại */}
          <Input
            key="phone"
            title={translate('PHONE')}
            placeholder={translate('ENTER_PHONE')}
            type="tel"
            name="phone"
          />
          {/* Placeholder để cân bằng lưới (tùy chọn) */}
          <div className="hidden md:block"></div>
        </div>

        {/* Nút hành động */}
        <div className="modal-action">
          <button type="submit" className="btn btn-primary">
            {translate('ADD_USER')}
          </button>
          <button
            type="button"
            className="btn btn-ghost"
            onClick={() => document.getElementById(id)?.close()}
          >
            {translate('CANCEL')}
          </button>
        </div>
      </form>
    </Modal>
  );
};

export default AddUserModal;
</file>

<file path="src/app/pages/user-management/EditUserModal.tsx">
import { translate } from '../../components/common/translate/translate';
import Modal from '../../components/layout/Modal';
import Input from '../../components/ui/Input';

interface EditUserModalProps {
  id: string;
  user?: { id: string; email: string; name: string; createdAt: string };
}

const EditUserModal = ({ id, user }: EditUserModalProps) => {
  return (
    <Modal title={translate('EDIT_USER') + `#${user?.id}`} id={id}>
      <form method="dialog" className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Email */}
          <Input
            key="email"
            title={'Email'}
            placeholder={translate('ENTER_EMAIL')}
            type="email"
            name="email"
          />
          {/* Tên người dùng */}
          <Input
            key="name"
            title={translate('USER_NAME')}
            placeholder={translate('ENTER_USER_NAME')}
            type="text"
            name="name"
          />
          {/* Mật khẩu */}
          <Input
            key="password"
            title={translate('PASSWORD')}
            placeholder={translate('ENTER_PASSWORD')}
            type="password"
            name="password"
          />
          {/* Ngày sinh */}
          <Input
            key="dob"
            title={translate('DATE_OF_BIRTH')}
            placeholder={translate('DATE_OF_BIRTH')}
            type="date"
            name="dob"
          />
          {/* Số điện thoại */}
          <Input
            key="phone"
            title={translate('PHONE')}
            placeholder={translate('ENTER_PHONE')}
            type="tel"
            name="phone"
          />
          {/* Placeholder để cân bằng lưới (tùy chọn) */}
          <div className="hidden md:block"></div>
        </div>

        {/* Nút hành động */}
        <div className="modal-action">
          <button type="submit" className="btn btn-primary">
            {translate('EDIT_USER')}
          </button>
          <button
            type="button"
            className="btn btn-ghost"
            onClick={() => document.getElementById(id)?.close()}
          >
            {translate('CANCEL')}
          </button>
        </div>
      </form>
    </Modal>
  );
};

export default EditUserModal;
</file>

<file path="src/app/pages/user-management/UserManagement.tsx">
import { useState } from 'react';
import AddUserModal from './AddUserModal';
import { translate } from '../../components/common/translate/translate';
import { useGlobalContext } from '../../components/common/GlobalContext';
import EditUserModal from './EditUserModal';
import { PencilSimple } from 'phosphor-react';

const initialUsers = [
  {
    id: 1,
    name: 'Nguyễn Văn A',
    email: 'nva@example.com',
    role: 'Admin',
    createdAt: '2023-10-01',
  },
  {
    id: 2,
    name: 'Trần Thị B',
    email: 'ttb@example.com',
    role: 'User',
    createdAt: '2023-10-02',
  },
  {
    id: 3,
    name: 'Lê Văn C',
    email: 'lvc@example.com',
    role: 'Editor',
    createdAt: '2023-10-03',
  },
];

const UserManagement = () => {
  const [users, setUsers] = useState(initialUsers);
  const [selectedUser, setSelectedUser] = useState<any>(null); // Thêm trạng thái để lưu user được chọn
  const { language } = useGlobalContext();

  // Hàm xử lý xóa người dùng
  const handleDelete = (id: number) => {
    setUsers(users.filter((user) => user.id !== id));
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-bold">{translate('USER_MANAGEMENT')}</h2>
        <button
          className="btn btn-primary"
          onClick={() => {
            const modal = document.getElementById(
              'add-user'
            ) as HTMLDialogElement | null;
            if (modal) {
              modal.showModal();
            }
          }}
        >
          {translate('ADD_USER')}
        </button>
      </div>

      <div className="overflow-x-auto">
        <table className="table w-full">
          <thead>
            <tr>
              <th>ID</th>
              <th>{translate('USER_NAME')}</th>
              <th>Email</th>
              <th>{translate('USER_ROLE')}</th>
              <th>{translate('CREATED_AT')}</th>
              <th>{translate('ACTION')}</th>
            </tr>
          </thead>
          <tbody>
            {users.map((u) => (
              <tr key={u.id}>
                <td>{u.id}</td>
                <td>{u.name}</td>
                <td>{u.email}</td>
                <td>{u.role}</td>
                <td>{u.createdAt}</td>
                <td>
                  <button
                    className="btn btn-info btn-sm"
                    onClick={() => {
                      setSelectedUser(u); // Lưu user được chọn
                      const modal = document.getElementById(
                        'edit-user'
                      ) as HTMLDialogElement | null;
                      if (modal) {
                        modal.showModal();
                      }
                    }}
                  >
                    {translate('EDIT')}
                  </button>
                  <button
                    className="btn btn-error btn-sm ml-2"
                    onClick={() => handleDelete(u.id)} // Sửa lỗi: dùng u.id thay vì user.id
                  >
                    {translate('DELETE')}
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Chỉ render EditUserModal khi có user được chọn */}
      {selectedUser && <EditUserModal id="edit-user" user={selectedUser} />}
      <AddUserModal id="add-user" />
    </div>
  );
};

export default UserManagement;
</file>

<file path="src/app/pages/user-management/UserManagementContext.tsx">
import { createContext, useContext, useState } from 'react';
export interface UserManagementContextType {
  isLoading: boolean;
  setIsLoading: (isLoading: boolean) => void;
  isOpenAddUserModal: boolean;
  setIsOpenAddUserModal: (isOpen: boolean) => void;
  isOpenEditUserModal: boolean;
  setIsOpenEditUserModal: (isOpen: boolean) => void;
}

export const UserManagementContext = createContext<
  UserManagementContextType | undefined
>(undefined);
export const UserManagementContextProvider = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [isOpenAddUserModal, setIsOpenAddUserModal] = useState(false);
  const [isOpenEditUserModal, setIsOpenEditUserModal] = useState(false);

  return (
    <UserManagementContext.Provider
      value={{
        isLoading,
        setIsLoading,
        isOpenAddUserModal,
        setIsOpenAddUserModal,
        isOpenEditUserModal,
        setIsOpenEditUserModal,
      }}
    >
      {children}
    </UserManagementContext.Provider>
  );
};

export const useUserManagementContext = () => {
  const context = useContext(UserManagementContext);
  if (!context) {
    throw new Error('not exist context');
  }
  return context;
};
</file>

<file path="src/app/types/LanguageType.tsx">
export const LanguageCode = {
  vi: 'vi',
  en: 'en',
};
export type LanguageType = keyof typeof LanguageCode;
export const LanguageFlag = {
  [LanguageCode.vi]: './icons/vi-icon.png',
  [LanguageCode.en]: './icons/en-icon.png',
};

export const LanguageList = [
  {
    code: LanguageCode.vi as LanguageType,
    flag: LanguageFlag[LanguageCode.vi],
  },
  {
    code: LanguageCode.en as LanguageType,
    flag: LanguageFlag[LanguageCode.en],
  },
];
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react';
import * as ReactDOM from 'react-dom/client';
import App from './app/app';
import { BrowserRouter } from 'react-router-dom';
import { GlobalContextProvider } from './app/components/common/GlobalContext';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <GlobalContextProvider>
    <BrowserRouter>
      <StrictMode>
        <App />
      </StrictMode>
    </BrowserRouter>
  </GlobalContextProvider>
);
</file>

<file path="src/styles.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
/* You can add global styles to this file, and also import other style files */
</file>

<file path="tailwind.config.js">
const { createGlobPatternsForDependencies } = require('@nx/react/tailwind');
const { join } = require('path');

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    join(
      __dirname,
      '{src,pages,components,app}/**/*!(*.stories|*.spec).{ts,tsx,html}'
    ),
    ...createGlobPatternsForDependencies(__dirname),
  ],
  theme: {
    extend: {},
  },
  plugins: [require('daisyui')],
};
</file>

<file path="tsconfig.app.json">
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "dist",
    "tsBuildInfoFile": "dist/tsconfig.app.tsbuildinfo",
    "jsx": "react-jsx",
    "lib": ["dom"],
    "types": [
      "node",
      "@nx/react/typings/cssmodule.d.ts",
      "@nx/react/typings/image.d.ts",
      "vite/client"
    ],
    "rootDir": "src"
  },
  "exclude": [
    "out-tsc",
    "dist",
    "src/**/*.spec.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.tsx",
    "src/**/*.test.tsx",
    "src/**/*.spec.js",
    "src/**/*.test.js",
    "src/**/*.spec.jsx",
    "src/**/*.test.jsx",
    "eslint.config.js",
    "eslint.config.cjs",
    "eslint.config.mjs"
  ],
  "include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    }
  ],
  "extends": "../../tsconfig.base.json"
}
</file>

<file path="vite.config.ts">
/// <reference types='vitest' />
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig(() => ({
  root: __dirname,
  cacheDir: '../../node_modules/.vite/apps/teacher-app',
  server: {
    port: 4201,
    host: 'localhost',
  },
  preview: {
    port: 4300,
    host: 'localhost',
  },
  plugins: [react()],
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  build: {
    outDir: './dist',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
  },
}));
</file>

</files>
